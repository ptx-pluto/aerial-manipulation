classdef RockingCmd < ros.Message
    %RockingCmd MATLAB implementation of rnw_msgs/RockingCmd
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'rnw_msgs/RockingCmd' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '36942a2eba58aae096923d7e0d49f2a1' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        GeometryMsgsPointClass = ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Point') % Dispatch to MATLAB class for message type geometry_msgs/Point
        RnwMsgsGripStateClass = ros.msg.internal.MessageFactory.getClassForType('rnw_msgs/GripState') % Dispatch to MATLAB class for message type rnw_msgs/GripState
        StdMsgsHeaderClass = ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        Fsm
        CmdType
        CmdIdx
        SetpointUav
        SetpointApex
        IsWalking
        WalkIdx
        TauDeg
        StepCount
        GripState
        SetpointNutationDeg
        SetpointGripDepth
        ErrGripDepth
        ErrNutationDeg
    end
    
    properties (Access = protected)
        Cache = struct('Header', [], 'SetpointUav', [], 'SetpointApex', [], 'GripState', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'CmdIdx', 'CmdType', 'ErrGripDepth', 'ErrNutationDeg', 'Fsm', 'GripState', 'Header', 'IsWalking', 'SetpointApex', 'SetpointGripDepth', 'SetpointNutationDeg', 'SetpointUav', 'StepCount', 'TauDeg', 'WalkIdx'} % List of non-constant message properties
        ROSPropertyList = {'cmd_idx', 'cmd_type', 'err_grip_depth', 'err_nutation_deg', 'fsm', 'grip_state', 'header', 'is_walking', 'setpoint_apex', 'setpoint_grip_depth', 'setpoint_nutation_deg', 'setpoint_uav', 'step_count', 'tau_deg', 'walk_idx'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = RockingCmd(msg)
            %RockingCmd Construct the message object RockingCmd
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'RockingCmd', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function fsm = get.Fsm(obj)
            %get.Fsm Get the value for property Fsm
            fsm = typecast(int8(obj.JavaMessage.getFsm), 'uint8');
        end
        
        function set.Fsm(obj, fsm)
            %set.Fsm Set the value for property Fsm
            validateattributes(fsm, {'numeric'}, {'nonempty', 'scalar'}, 'RockingCmd', 'Fsm');
            
            obj.JavaMessage.setFsm(fsm);
        end
        
        function cmdtype = get.CmdType(obj)
            %get.CmdType Get the value for property CmdType
            cmdtype = typecast(int8(obj.JavaMessage.getCmdType), 'uint8');
        end
        
        function set.CmdType(obj, cmdtype)
            %set.CmdType Set the value for property CmdType
            validateattributes(cmdtype, {'numeric'}, {'nonempty', 'scalar'}, 'RockingCmd', 'CmdType');
            
            obj.JavaMessage.setCmdType(cmdtype);
        end
        
        function cmdidx = get.CmdIdx(obj)
            %get.CmdIdx Get the value for property CmdIdx
            cmdidx = typecast(int32(obj.JavaMessage.getCmdIdx), 'uint32');
        end
        
        function set.CmdIdx(obj, cmdidx)
            %set.CmdIdx Set the value for property CmdIdx
            validateattributes(cmdidx, {'numeric'}, {'nonempty', 'scalar'}, 'RockingCmd', 'CmdIdx');
            
            obj.JavaMessage.setCmdIdx(cmdidx);
        end
        
        function setpointuav = get.SetpointUav(obj)
            %get.SetpointUav Get the value for property SetpointUav
            if isempty(obj.Cache.SetpointUav)
                obj.Cache.SetpointUav = feval(obj.GeometryMsgsPointClass, obj.JavaMessage.getSetpointUav);
            end
            setpointuav = obj.Cache.SetpointUav;
        end
        
        function set.SetpointUav(obj, setpointuav)
            %set.SetpointUav Set the value for property SetpointUav
            validateattributes(setpointuav, {obj.GeometryMsgsPointClass}, {'nonempty', 'scalar'}, 'RockingCmd', 'SetpointUav');
            
            obj.JavaMessage.setSetpointUav(setpointuav.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.SetpointUav)
                obj.Cache.SetpointUav.setJavaObject(setpointuav.getJavaObject);
            end
        end
        
        function setpointapex = get.SetpointApex(obj)
            %get.SetpointApex Get the value for property SetpointApex
            if isempty(obj.Cache.SetpointApex)
                obj.Cache.SetpointApex = feval(obj.GeometryMsgsPointClass, obj.JavaMessage.getSetpointApex);
            end
            setpointapex = obj.Cache.SetpointApex;
        end
        
        function set.SetpointApex(obj, setpointapex)
            %set.SetpointApex Set the value for property SetpointApex
            validateattributes(setpointapex, {obj.GeometryMsgsPointClass}, {'nonempty', 'scalar'}, 'RockingCmd', 'SetpointApex');
            
            obj.JavaMessage.setSetpointApex(setpointapex.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.SetpointApex)
                obj.Cache.SetpointApex.setJavaObject(setpointapex.getJavaObject);
            end
        end
        
        function iswalking = get.IsWalking(obj)
            %get.IsWalking Get the value for property IsWalking
            iswalking = logical(obj.JavaMessage.getIsWalking);
        end
        
        function set.IsWalking(obj, iswalking)
            %set.IsWalking Set the value for property IsWalking
            validateattributes(iswalking, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'RockingCmd', 'IsWalking');
            
            obj.JavaMessage.setIsWalking(iswalking);
        end
        
        function walkidx = get.WalkIdx(obj)
            %get.WalkIdx Get the value for property WalkIdx
            walkidx = typecast(int8(obj.JavaMessage.getWalkIdx), 'uint8');
        end
        
        function set.WalkIdx(obj, walkidx)
            %set.WalkIdx Set the value for property WalkIdx
            validateattributes(walkidx, {'numeric'}, {'nonempty', 'scalar'}, 'RockingCmd', 'WalkIdx');
            
            obj.JavaMessage.setWalkIdx(walkidx);
        end
        
        function taudeg = get.TauDeg(obj)
            %get.TauDeg Get the value for property TauDeg
            taudeg = double(obj.JavaMessage.getTauDeg);
        end
        
        function set.TauDeg(obj, taudeg)
            %set.TauDeg Set the value for property TauDeg
            validateattributes(taudeg, {'numeric'}, {'nonempty', 'scalar'}, 'RockingCmd', 'TauDeg');
            
            obj.JavaMessage.setTauDeg(taudeg);
        end
        
        function stepcount = get.StepCount(obj)
            %get.StepCount Get the value for property StepCount
            stepcount = typecast(int32(obj.JavaMessage.getStepCount), 'uint32');
        end
        
        function set.StepCount(obj, stepcount)
            %set.StepCount Set the value for property StepCount
            validateattributes(stepcount, {'numeric'}, {'nonempty', 'scalar'}, 'RockingCmd', 'StepCount');
            
            obj.JavaMessage.setStepCount(stepcount);
        end
        
        function gripstate = get.GripState(obj)
            %get.GripState Get the value for property GripState
            if isempty(obj.Cache.GripState)
                obj.Cache.GripState = feval(obj.RnwMsgsGripStateClass, obj.JavaMessage.getGripState);
            end
            gripstate = obj.Cache.GripState;
        end
        
        function set.GripState(obj, gripstate)
            %set.GripState Set the value for property GripState
            validateattributes(gripstate, {obj.RnwMsgsGripStateClass}, {'nonempty', 'scalar'}, 'RockingCmd', 'GripState');
            
            obj.JavaMessage.setGripState(gripstate.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.GripState)
                obj.Cache.GripState.setJavaObject(gripstate.getJavaObject);
            end
        end
        
        function setpointnutationdeg = get.SetpointNutationDeg(obj)
            %get.SetpointNutationDeg Get the value for property SetpointNutationDeg
            setpointnutationdeg = double(obj.JavaMessage.getSetpointNutationDeg);
        end
        
        function set.SetpointNutationDeg(obj, setpointnutationdeg)
            %set.SetpointNutationDeg Set the value for property SetpointNutationDeg
            validateattributes(setpointnutationdeg, {'numeric'}, {'nonempty', 'scalar'}, 'RockingCmd', 'SetpointNutationDeg');
            
            obj.JavaMessage.setSetpointNutationDeg(setpointnutationdeg);
        end
        
        function setpointgripdepth = get.SetpointGripDepth(obj)
            %get.SetpointGripDepth Get the value for property SetpointGripDepth
            setpointgripdepth = double(obj.JavaMessage.getSetpointGripDepth);
        end
        
        function set.SetpointGripDepth(obj, setpointgripdepth)
            %set.SetpointGripDepth Set the value for property SetpointGripDepth
            validateattributes(setpointgripdepth, {'numeric'}, {'nonempty', 'scalar'}, 'RockingCmd', 'SetpointGripDepth');
            
            obj.JavaMessage.setSetpointGripDepth(setpointgripdepth);
        end
        
        function errgripdepth = get.ErrGripDepth(obj)
            %get.ErrGripDepth Get the value for property ErrGripDepth
            errgripdepth = double(obj.JavaMessage.getErrGripDepth);
        end
        
        function set.ErrGripDepth(obj, errgripdepth)
            %set.ErrGripDepth Set the value for property ErrGripDepth
            validateattributes(errgripdepth, {'numeric'}, {'nonempty', 'scalar'}, 'RockingCmd', 'ErrGripDepth');
            
            obj.JavaMessage.setErrGripDepth(errgripdepth);
        end
        
        function errnutationdeg = get.ErrNutationDeg(obj)
            %get.ErrNutationDeg Get the value for property ErrNutationDeg
            errnutationdeg = double(obj.JavaMessage.getErrNutationDeg);
        end
        
        function set.ErrNutationDeg(obj, errnutationdeg)
            %set.ErrNutationDeg Set the value for property ErrNutationDeg
            validateattributes(errnutationdeg, {'numeric'}, {'nonempty', 'scalar'}, 'RockingCmd', 'ErrNutationDeg');
            
            obj.JavaMessage.setErrNutationDeg(errnutationdeg);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
            obj.Cache.SetpointUav = [];
            obj.Cache.SetpointApex = [];
            obj.Cache.GripState = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Fsm = obj.Fsm;
            cpObj.CmdType = obj.CmdType;
            cpObj.CmdIdx = obj.CmdIdx;
            cpObj.IsWalking = obj.IsWalking;
            cpObj.WalkIdx = obj.WalkIdx;
            cpObj.TauDeg = obj.TauDeg;
            cpObj.StepCount = obj.StepCount;
            cpObj.SetpointNutationDeg = obj.SetpointNutationDeg;
            cpObj.SetpointGripDepth = obj.SetpointGripDepth;
            cpObj.ErrGripDepth = obj.ErrGripDepth;
            cpObj.ErrNutationDeg = obj.ErrNutationDeg;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
            cpObj.SetpointUav = copy(obj.SetpointUav);
            cpObj.SetpointApex = copy(obj.SetpointApex);
            cpObj.GripState = copy(obj.GripState);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Fsm = strObj.Fsm;
            obj.CmdType = strObj.CmdType;
            obj.CmdIdx = strObj.CmdIdx;
            obj.IsWalking = strObj.IsWalking;
            obj.WalkIdx = strObj.WalkIdx;
            obj.TauDeg = strObj.TauDeg;
            obj.StepCount = strObj.StepCount;
            obj.SetpointNutationDeg = strObj.SetpointNutationDeg;
            obj.SetpointGripDepth = strObj.SetpointGripDepth;
            obj.ErrGripDepth = strObj.ErrGripDepth;
            obj.ErrNutationDeg = strObj.ErrNutationDeg;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
            obj.SetpointUav = feval([obj.GeometryMsgsPointClass '.loadobj'], strObj.SetpointUav);
            obj.SetpointApex = feval([obj.GeometryMsgsPointClass '.loadobj'], strObj.SetpointApex);
            obj.GripState = feval([obj.RnwMsgsGripStateClass '.loadobj'], strObj.GripState);
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Fsm = obj.Fsm;
            strObj.CmdType = obj.CmdType;
            strObj.CmdIdx = obj.CmdIdx;
            strObj.IsWalking = obj.IsWalking;
            strObj.WalkIdx = obj.WalkIdx;
            strObj.TauDeg = obj.TauDeg;
            strObj.StepCount = obj.StepCount;
            strObj.SetpointNutationDeg = obj.SetpointNutationDeg;
            strObj.SetpointGripDepth = obj.SetpointGripDepth;
            strObj.ErrGripDepth = obj.ErrGripDepth;
            strObj.ErrNutationDeg = obj.ErrNutationDeg;
            strObj.Header = saveobj(obj.Header);
            strObj.SetpointUav = saveobj(obj.SetpointUav);
            strObj.SetpointApex = saveobj(obj.SetpointApex);
            strObj.GripState = saveobj(obj.GripState);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.rnw_msgs.RockingCmd.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.rnw_msgs.RockingCmd;
            obj.reload(strObj);
        end
    end
end
