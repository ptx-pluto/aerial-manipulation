classdef ConeState < ros.Message
    %ConeState MATLAB implementation of rnw_msgs/ConeState
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'rnw_msgs/ConeState' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '7f0fd06823e28fba0a2afe92ec3a345c' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        GeometryMsgsPointClass = ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Point') % Dispatch to MATLAB class for message type geometry_msgs/Point
        GeometryMsgsVector3Class = ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Vector3') % Dispatch to MATLAB class for message type geometry_msgs/Vector3
        NavMsgsOdometryClass = ros.msg.internal.MessageFactory.getClassForType('nav_msgs/Odometry') % Dispatch to MATLAB class for message type nav_msgs/Odometry
        StdMsgsHeaderClass = ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        Odom
        EulerAngles
        EulerAnglesVelocity
        IsPointContact
        ContactPoint
        DiscCenter
        Tip
        Base
        Height
        Radius
    end
    
    properties (Access = protected)
        Cache = struct('Header', [], 'Odom', [], 'EulerAngles', [], 'EulerAnglesVelocity', [], 'ContactPoint', [], 'DiscCenter', [], 'Tip', [], 'Base', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Base', 'ContactPoint', 'DiscCenter', 'EulerAngles', 'EulerAnglesVelocity', 'Header', 'Height', 'IsPointContact', 'Odom', 'Radius', 'Tip'} % List of non-constant message properties
        ROSPropertyList = {'base', 'contact_point', 'disc_center', 'euler_angles', 'euler_angles_velocity', 'header', 'height', 'is_point_contact', 'odom', 'radius', 'tip'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = ConeState(msg)
            %ConeState Construct the message object ConeState
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'ConeState', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function odom = get.Odom(obj)
            %get.Odom Get the value for property Odom
            if isempty(obj.Cache.Odom)
                obj.Cache.Odom = feval(obj.NavMsgsOdometryClass, obj.JavaMessage.getOdom);
            end
            odom = obj.Cache.Odom;
        end
        
        function set.Odom(obj, odom)
            %set.Odom Set the value for property Odom
            validateattributes(odom, {obj.NavMsgsOdometryClass}, {'nonempty', 'scalar'}, 'ConeState', 'Odom');
            
            obj.JavaMessage.setOdom(odom.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Odom)
                obj.Cache.Odom.setJavaObject(odom.getJavaObject);
            end
        end
        
        function eulerangles = get.EulerAngles(obj)
            %get.EulerAngles Get the value for property EulerAngles
            if isempty(obj.Cache.EulerAngles)
                obj.Cache.EulerAngles = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getEulerAngles);
            end
            eulerangles = obj.Cache.EulerAngles;
        end
        
        function set.EulerAngles(obj, eulerangles)
            %set.EulerAngles Set the value for property EulerAngles
            validateattributes(eulerangles, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'ConeState', 'EulerAngles');
            
            obj.JavaMessage.setEulerAngles(eulerangles.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.EulerAngles)
                obj.Cache.EulerAngles.setJavaObject(eulerangles.getJavaObject);
            end
        end
        
        function euleranglesvelocity = get.EulerAnglesVelocity(obj)
            %get.EulerAnglesVelocity Get the value for property EulerAnglesVelocity
            if isempty(obj.Cache.EulerAnglesVelocity)
                obj.Cache.EulerAnglesVelocity = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getEulerAnglesVelocity);
            end
            euleranglesvelocity = obj.Cache.EulerAnglesVelocity;
        end
        
        function set.EulerAnglesVelocity(obj, euleranglesvelocity)
            %set.EulerAnglesVelocity Set the value for property EulerAnglesVelocity
            validateattributes(euleranglesvelocity, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'ConeState', 'EulerAnglesVelocity');
            
            obj.JavaMessage.setEulerAnglesVelocity(euleranglesvelocity.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.EulerAnglesVelocity)
                obj.Cache.EulerAnglesVelocity.setJavaObject(euleranglesvelocity.getJavaObject);
            end
        end
        
        function ispointcontact = get.IsPointContact(obj)
            %get.IsPointContact Get the value for property IsPointContact
            ispointcontact = logical(obj.JavaMessage.getIsPointContact);
        end
        
        function set.IsPointContact(obj, ispointcontact)
            %set.IsPointContact Set the value for property IsPointContact
            validateattributes(ispointcontact, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'ConeState', 'IsPointContact');
            
            obj.JavaMessage.setIsPointContact(ispointcontact);
        end
        
        function contactpoint = get.ContactPoint(obj)
            %get.ContactPoint Get the value for property ContactPoint
            if isempty(obj.Cache.ContactPoint)
                obj.Cache.ContactPoint = feval(obj.GeometryMsgsPointClass, obj.JavaMessage.getContactPoint);
            end
            contactpoint = obj.Cache.ContactPoint;
        end
        
        function set.ContactPoint(obj, contactpoint)
            %set.ContactPoint Set the value for property ContactPoint
            validateattributes(contactpoint, {obj.GeometryMsgsPointClass}, {'nonempty', 'scalar'}, 'ConeState', 'ContactPoint');
            
            obj.JavaMessage.setContactPoint(contactpoint.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.ContactPoint)
                obj.Cache.ContactPoint.setJavaObject(contactpoint.getJavaObject);
            end
        end
        
        function disccenter = get.DiscCenter(obj)
            %get.DiscCenter Get the value for property DiscCenter
            if isempty(obj.Cache.DiscCenter)
                obj.Cache.DiscCenter = feval(obj.GeometryMsgsPointClass, obj.JavaMessage.getDiscCenter);
            end
            disccenter = obj.Cache.DiscCenter;
        end
        
        function set.DiscCenter(obj, disccenter)
            %set.DiscCenter Set the value for property DiscCenter
            validateattributes(disccenter, {obj.GeometryMsgsPointClass}, {'nonempty', 'scalar'}, 'ConeState', 'DiscCenter');
            
            obj.JavaMessage.setDiscCenter(disccenter.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.DiscCenter)
                obj.Cache.DiscCenter.setJavaObject(disccenter.getJavaObject);
            end
        end
        
        function tip = get.Tip(obj)
            %get.Tip Get the value for property Tip
            if isempty(obj.Cache.Tip)
                obj.Cache.Tip = feval(obj.GeometryMsgsPointClass, obj.JavaMessage.getTip);
            end
            tip = obj.Cache.Tip;
        end
        
        function set.Tip(obj, tip)
            %set.Tip Set the value for property Tip
            validateattributes(tip, {obj.GeometryMsgsPointClass}, {'nonempty', 'scalar'}, 'ConeState', 'Tip');
            
            obj.JavaMessage.setTip(tip.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Tip)
                obj.Cache.Tip.setJavaObject(tip.getJavaObject);
            end
        end
        
        function base = get.Base(obj)
            %get.Base Get the value for property Base
            if isempty(obj.Cache.Base)
                obj.Cache.Base = feval(obj.GeometryMsgsPointClass, obj.JavaMessage.getBase);
            end
            base = obj.Cache.Base;
        end
        
        function set.Base(obj, base)
            %set.Base Set the value for property Base
            validateattributes(base, {obj.GeometryMsgsPointClass}, {'nonempty', 'scalar'}, 'ConeState', 'Base');
            
            obj.JavaMessage.setBase(base.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Base)
                obj.Cache.Base.setJavaObject(base.getJavaObject);
            end
        end
        
        function height = get.Height(obj)
            %get.Height Get the value for property Height
            height = double(obj.JavaMessage.getHeight);
        end
        
        function set.Height(obj, height)
            %set.Height Set the value for property Height
            validateattributes(height, {'numeric'}, {'nonempty', 'scalar'}, 'ConeState', 'Height');
            
            obj.JavaMessage.setHeight(height);
        end
        
        function radius = get.Radius(obj)
            %get.Radius Get the value for property Radius
            radius = double(obj.JavaMessage.getRadius);
        end
        
        function set.Radius(obj, radius)
            %set.Radius Set the value for property Radius
            validateattributes(radius, {'numeric'}, {'nonempty', 'scalar'}, 'ConeState', 'Radius');
            
            obj.JavaMessage.setRadius(radius);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
            obj.Cache.Odom = [];
            obj.Cache.EulerAngles = [];
            obj.Cache.EulerAnglesVelocity = [];
            obj.Cache.ContactPoint = [];
            obj.Cache.DiscCenter = [];
            obj.Cache.Tip = [];
            obj.Cache.Base = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.IsPointContact = obj.IsPointContact;
            cpObj.Height = obj.Height;
            cpObj.Radius = obj.Radius;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
            cpObj.Odom = copy(obj.Odom);
            cpObj.EulerAngles = copy(obj.EulerAngles);
            cpObj.EulerAnglesVelocity = copy(obj.EulerAnglesVelocity);
            cpObj.ContactPoint = copy(obj.ContactPoint);
            cpObj.DiscCenter = copy(obj.DiscCenter);
            cpObj.Tip = copy(obj.Tip);
            cpObj.Base = copy(obj.Base);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.IsPointContact = strObj.IsPointContact;
            obj.Height = strObj.Height;
            obj.Radius = strObj.Radius;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
            obj.Odom = feval([obj.NavMsgsOdometryClass '.loadobj'], strObj.Odom);
            obj.EulerAngles = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.EulerAngles);
            obj.EulerAnglesVelocity = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.EulerAnglesVelocity);
            obj.ContactPoint = feval([obj.GeometryMsgsPointClass '.loadobj'], strObj.ContactPoint);
            obj.DiscCenter = feval([obj.GeometryMsgsPointClass '.loadobj'], strObj.DiscCenter);
            obj.Tip = feval([obj.GeometryMsgsPointClass '.loadobj'], strObj.Tip);
            obj.Base = feval([obj.GeometryMsgsPointClass '.loadobj'], strObj.Base);
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.IsPointContact = obj.IsPointContact;
            strObj.Height = obj.Height;
            strObj.Radius = obj.Radius;
            strObj.Header = saveobj(obj.Header);
            strObj.Odom = saveobj(obj.Odom);
            strObj.EulerAngles = saveobj(obj.EulerAngles);
            strObj.EulerAnglesVelocity = saveobj(obj.EulerAnglesVelocity);
            strObj.ContactPoint = saveobj(obj.ContactPoint);
            strObj.DiscCenter = saveobj(obj.DiscCenter);
            strObj.Tip = saveobj(obj.Tip);
            strObj.Base = saveobj(obj.Base);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.rnw_msgs.ConeState.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.rnw_msgs.ConeState;
            obj.reload(strObj);
        end
    end
end
