classdef GripState < ros.Message
    %GripState MATLAB implementation of rnw_msgs/GripState
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'rnw_msgs/GripState' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'dd8ed08156b8c7edd56e15cade4b7b4b' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        GeometryMsgsPointClass = ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Point') % Dispatch to MATLAB class for message type geometry_msgs/Point
        NavMsgsOdometryClass = ros.msg.internal.MessageFactory.getClassForType('nav_msgs/Odometry') % Dispatch to MATLAB class for message type nav_msgs/Odometry
        RnwMsgsConeStateClass = ros.msg.internal.MessageFactory.getClassForType('rnw_msgs/ConeState') % Dispatch to MATLAB class for message type rnw_msgs/ConeState
        StdMsgsHeaderClass = ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        ConeState
        UavOdom
        FluTTcp
        GripPoint
        GripRadius
        GripDepth
        GripValid
    end
    
    properties (Access = protected)
        Cache = struct('Header', [], 'ConeState', [], 'UavOdom', [], 'FluTTcp', [], 'GripPoint', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'ConeState', 'FluTTcp', 'GripDepth', 'GripPoint', 'GripRadius', 'GripValid', 'Header', 'UavOdom'} % List of non-constant message properties
        ROSPropertyList = {'cone_state', 'flu_T_tcp', 'grip_depth', 'grip_point', 'grip_radius', 'grip_valid', 'header', 'uav_odom'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = GripState(msg)
            %GripState Construct the message object GripState
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'GripState', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function conestate = get.ConeState(obj)
            %get.ConeState Get the value for property ConeState
            if isempty(obj.Cache.ConeState)
                obj.Cache.ConeState = feval(obj.RnwMsgsConeStateClass, obj.JavaMessage.getConeState);
            end
            conestate = obj.Cache.ConeState;
        end
        
        function set.ConeState(obj, conestate)
            %set.ConeState Set the value for property ConeState
            validateattributes(conestate, {obj.RnwMsgsConeStateClass}, {'nonempty', 'scalar'}, 'GripState', 'ConeState');
            
            obj.JavaMessage.setConeState(conestate.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.ConeState)
                obj.Cache.ConeState.setJavaObject(conestate.getJavaObject);
            end
        end
        
        function uavodom = get.UavOdom(obj)
            %get.UavOdom Get the value for property UavOdom
            if isempty(obj.Cache.UavOdom)
                obj.Cache.UavOdom = feval(obj.NavMsgsOdometryClass, obj.JavaMessage.getUavOdom);
            end
            uavodom = obj.Cache.UavOdom;
        end
        
        function set.UavOdom(obj, uavodom)
            %set.UavOdom Set the value for property UavOdom
            validateattributes(uavodom, {obj.NavMsgsOdometryClass}, {'nonempty', 'scalar'}, 'GripState', 'UavOdom');
            
            obj.JavaMessage.setUavOdom(uavodom.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.UavOdom)
                obj.Cache.UavOdom.setJavaObject(uavodom.getJavaObject);
            end
        end
        
        function fluttcp = get.FluTTcp(obj)
            %get.FluTTcp Get the value for property FluTTcp
            if isempty(obj.Cache.FluTTcp)
                obj.Cache.FluTTcp = feval(obj.GeometryMsgsPointClass, obj.JavaMessage.getFluTTcp);
            end
            fluttcp = obj.Cache.FluTTcp;
        end
        
        function set.FluTTcp(obj, fluttcp)
            %set.FluTTcp Set the value for property FluTTcp
            validateattributes(fluttcp, {obj.GeometryMsgsPointClass}, {'nonempty', 'scalar'}, 'GripState', 'FluTTcp');
            
            obj.JavaMessage.setFluTTcp(fluttcp.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.FluTTcp)
                obj.Cache.FluTTcp.setJavaObject(fluttcp.getJavaObject);
            end
        end
        
        function grippoint = get.GripPoint(obj)
            %get.GripPoint Get the value for property GripPoint
            if isempty(obj.Cache.GripPoint)
                obj.Cache.GripPoint = feval(obj.GeometryMsgsPointClass, obj.JavaMessage.getGripPoint);
            end
            grippoint = obj.Cache.GripPoint;
        end
        
        function set.GripPoint(obj, grippoint)
            %set.GripPoint Set the value for property GripPoint
            validateattributes(grippoint, {obj.GeometryMsgsPointClass}, {'nonempty', 'scalar'}, 'GripState', 'GripPoint');
            
            obj.JavaMessage.setGripPoint(grippoint.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.GripPoint)
                obj.Cache.GripPoint.setJavaObject(grippoint.getJavaObject);
            end
        end
        
        function gripradius = get.GripRadius(obj)
            %get.GripRadius Get the value for property GripRadius
            gripradius = double(obj.JavaMessage.getGripRadius);
        end
        
        function set.GripRadius(obj, gripradius)
            %set.GripRadius Set the value for property GripRadius
            validateattributes(gripradius, {'numeric'}, {'nonempty', 'scalar'}, 'GripState', 'GripRadius');
            
            obj.JavaMessage.setGripRadius(gripradius);
        end
        
        function gripdepth = get.GripDepth(obj)
            %get.GripDepth Get the value for property GripDepth
            gripdepth = double(obj.JavaMessage.getGripDepth);
        end
        
        function set.GripDepth(obj, gripdepth)
            %set.GripDepth Set the value for property GripDepth
            validateattributes(gripdepth, {'numeric'}, {'nonempty', 'scalar'}, 'GripState', 'GripDepth');
            
            obj.JavaMessage.setGripDepth(gripdepth);
        end
        
        function gripvalid = get.GripValid(obj)
            %get.GripValid Get the value for property GripValid
            gripvalid = logical(obj.JavaMessage.getGripValid);
        end
        
        function set.GripValid(obj, gripvalid)
            %set.GripValid Set the value for property GripValid
            validateattributes(gripvalid, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'GripState', 'GripValid');
            
            obj.JavaMessage.setGripValid(gripvalid);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
            obj.Cache.ConeState = [];
            obj.Cache.UavOdom = [];
            obj.Cache.FluTTcp = [];
            obj.Cache.GripPoint = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.GripRadius = obj.GripRadius;
            cpObj.GripDepth = obj.GripDepth;
            cpObj.GripValid = obj.GripValid;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
            cpObj.ConeState = copy(obj.ConeState);
            cpObj.UavOdom = copy(obj.UavOdom);
            cpObj.FluTTcp = copy(obj.FluTTcp);
            cpObj.GripPoint = copy(obj.GripPoint);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.GripRadius = strObj.GripRadius;
            obj.GripDepth = strObj.GripDepth;
            obj.GripValid = strObj.GripValid;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
            obj.ConeState = feval([obj.RnwMsgsConeStateClass '.loadobj'], strObj.ConeState);
            obj.UavOdom = feval([obj.NavMsgsOdometryClass '.loadobj'], strObj.UavOdom);
            obj.FluTTcp = feval([obj.GeometryMsgsPointClass '.loadobj'], strObj.FluTTcp);
            obj.GripPoint = feval([obj.GeometryMsgsPointClass '.loadobj'], strObj.GripPoint);
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.GripRadius = obj.GripRadius;
            strObj.GripDepth = obj.GripDepth;
            strObj.GripValid = obj.GripValid;
            strObj.Header = saveobj(obj.Header);
            strObj.ConeState = saveobj(obj.ConeState);
            strObj.UavOdom = saveobj(obj.UavOdom);
            strObj.FluTTcp = saveobj(obj.FluTTcp);
            strObj.GripPoint = saveobj(obj.GripPoint);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.rnw_msgs.GripState.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.rnw_msgs.GripState;
            obj.reload(strObj);
        end
    end
end
