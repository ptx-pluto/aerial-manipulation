classdef WalkingState < ros.Message
    %WalkingState MATLAB implementation of rnw_msgs/WalkingState
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'rnw_msgs/WalkingState' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'c54afc00cd3528a600a0173b64f3ef24' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        RnwMsgsConeStateClass = ros.msg.internal.MessageFactory.getClassForType('rnw_msgs/ConeState') % Dispatch to MATLAB class for message type rnw_msgs/ConeState
        StdMsgsHeaderClass = ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        StepCount
        ConeState
        TauDeg
        DesiredNutationDeg
    end
    
    properties (Access = protected)
        Cache = struct('Header', [], 'ConeState', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'ConeState', 'DesiredNutationDeg', 'Header', 'StepCount', 'TauDeg'} % List of non-constant message properties
        ROSPropertyList = {'cone_state', 'desired_nutation_deg', 'header', 'step_count', 'tau_deg'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = WalkingState(msg)
            %WalkingState Construct the message object WalkingState
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'WalkingState', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function stepcount = get.StepCount(obj)
            %get.StepCount Get the value for property StepCount
            stepcount = typecast(int32(obj.JavaMessage.getStepCount), 'uint32');
        end
        
        function set.StepCount(obj, stepcount)
            %set.StepCount Set the value for property StepCount
            validateattributes(stepcount, {'numeric'}, {'nonempty', 'scalar'}, 'WalkingState', 'StepCount');
            
            obj.JavaMessage.setStepCount(stepcount);
        end
        
        function conestate = get.ConeState(obj)
            %get.ConeState Get the value for property ConeState
            if isempty(obj.Cache.ConeState)
                obj.Cache.ConeState = feval(obj.RnwMsgsConeStateClass, obj.JavaMessage.getConeState);
            end
            conestate = obj.Cache.ConeState;
        end
        
        function set.ConeState(obj, conestate)
            %set.ConeState Set the value for property ConeState
            validateattributes(conestate, {obj.RnwMsgsConeStateClass}, {'nonempty', 'scalar'}, 'WalkingState', 'ConeState');
            
            obj.JavaMessage.setConeState(conestate.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.ConeState)
                obj.Cache.ConeState.setJavaObject(conestate.getJavaObject);
            end
        end
        
        function taudeg = get.TauDeg(obj)
            %get.TauDeg Get the value for property TauDeg
            taudeg = double(obj.JavaMessage.getTauDeg);
        end
        
        function set.TauDeg(obj, taudeg)
            %set.TauDeg Set the value for property TauDeg
            validateattributes(taudeg, {'numeric'}, {'nonempty', 'scalar'}, 'WalkingState', 'TauDeg');
            
            obj.JavaMessage.setTauDeg(taudeg);
        end
        
        function desirednutationdeg = get.DesiredNutationDeg(obj)
            %get.DesiredNutationDeg Get the value for property DesiredNutationDeg
            desirednutationdeg = double(obj.JavaMessage.getDesiredNutationDeg);
        end
        
        function set.DesiredNutationDeg(obj, desirednutationdeg)
            %set.DesiredNutationDeg Set the value for property DesiredNutationDeg
            validateattributes(desirednutationdeg, {'numeric'}, {'nonempty', 'scalar'}, 'WalkingState', 'DesiredNutationDeg');
            
            obj.JavaMessage.setDesiredNutationDeg(desirednutationdeg);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
            obj.Cache.ConeState = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.StepCount = obj.StepCount;
            cpObj.TauDeg = obj.TauDeg;
            cpObj.DesiredNutationDeg = obj.DesiredNutationDeg;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
            cpObj.ConeState = copy(obj.ConeState);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.StepCount = strObj.StepCount;
            obj.TauDeg = strObj.TauDeg;
            obj.DesiredNutationDeg = strObj.DesiredNutationDeg;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
            obj.ConeState = feval([obj.RnwMsgsConeStateClass '.loadobj'], strObj.ConeState);
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.StepCount = obj.StepCount;
            strObj.TauDeg = obj.TauDeg;
            strObj.DesiredNutationDeg = obj.DesiredNutationDeg;
            strObj.Header = saveobj(obj.Header);
            strObj.ConeState = saveobj(obj.ConeState);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.rnw_msgs.WalkingState.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.rnw_msgs.WalkingState;
            obj.reload(strObj);
        end
    end
end
