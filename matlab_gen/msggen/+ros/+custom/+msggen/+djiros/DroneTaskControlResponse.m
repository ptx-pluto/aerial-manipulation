classdef DroneTaskControlResponse < ros.Message
    %DroneTaskControlResponse MATLAB implementation of djiros/DroneTaskControlResponse
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'djiros/DroneTaskControlResponse' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'f03b0bc279b265c40946c1011df83013' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        Result
        CmdSet
        CmdId
        AckData
    end
    
    properties (Constant, Hidden)
        PropertyList = {'AckData', 'CmdId', 'CmdSet', 'Result'} % List of non-constant message properties
        ROSPropertyList = {'ack_data', 'cmd_id', 'cmd_set', 'result'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = DroneTaskControlResponse(msg)
            %DroneTaskControlResponse Construct the message object DroneTaskControlResponse
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function result = get.Result(obj)
            %get.Result Get the value for property Result
            result = logical(obj.JavaMessage.getResult);
        end
        
        function set.Result(obj, result)
            %set.Result Set the value for property Result
            validateattributes(result, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'DroneTaskControlResponse', 'Result');
            
            obj.JavaMessage.setResult(result);
        end
        
        function cmdset = get.CmdSet(obj)
            %get.CmdSet Get the value for property CmdSet
            cmdset = typecast(int8(obj.JavaMessage.getCmdSet), 'uint8');
        end
        
        function set.CmdSet(obj, cmdset)
            %set.CmdSet Set the value for property CmdSet
            validateattributes(cmdset, {'numeric'}, {'nonempty', 'scalar'}, 'DroneTaskControlResponse', 'CmdSet');
            
            obj.JavaMessage.setCmdSet(cmdset);
        end
        
        function cmdid = get.CmdId(obj)
            %get.CmdId Get the value for property CmdId
            cmdid = typecast(int8(obj.JavaMessage.getCmdId), 'uint8');
        end
        
        function set.CmdId(obj, cmdid)
            %set.CmdId Set the value for property CmdId
            validateattributes(cmdid, {'numeric'}, {'nonempty', 'scalar'}, 'DroneTaskControlResponse', 'CmdId');
            
            obj.JavaMessage.setCmdId(cmdid);
        end
        
        function ackdata = get.AckData(obj)
            %get.AckData Get the value for property AckData
            ackdata = typecast(int32(obj.JavaMessage.getAckData), 'uint32');
        end
        
        function set.AckData(obj, ackdata)
            %set.AckData Set the value for property AckData
            validateattributes(ackdata, {'numeric'}, {'nonempty', 'scalar'}, 'DroneTaskControlResponse', 'AckData');
            
            obj.JavaMessage.setAckData(ackdata);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Result = obj.Result;
            cpObj.CmdSet = obj.CmdSet;
            cpObj.CmdId = obj.CmdId;
            cpObj.AckData = obj.AckData;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Result = strObj.Result;
            obj.CmdSet = strObj.CmdSet;
            obj.CmdId = strObj.CmdId;
            obj.AckData = strObj.AckData;
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Result = obj.Result;
            strObj.CmdSet = obj.CmdSet;
            strObj.CmdId = obj.CmdId;
            strObj.AckData = obj.AckData;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.djiros.DroneTaskControlResponse.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.djiros.DroneTaskControlResponse;
            obj.reload(strObj);
        end
    end
end
