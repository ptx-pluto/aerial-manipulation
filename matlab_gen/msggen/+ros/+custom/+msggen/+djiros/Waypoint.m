classdef Waypoint < ros.Message
    %Waypoint MATLAB implementation of djiros/Waypoint
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'djiros/Waypoint' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '1d0881fabe75ce713c47829a8aa66d90' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        Latitude
        Longitude
        Altitude
        Heading
        Staytime
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Altitude', 'Heading', 'Latitude', 'Longitude', 'Staytime'} % List of non-constant message properties
        ROSPropertyList = {'altitude', 'heading', 'latitude', 'longitude', 'staytime'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = Waypoint(msg)
            %Waypoint Construct the message object Waypoint
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function latitude = get.Latitude(obj)
            %get.Latitude Get the value for property Latitude
            latitude = double(obj.JavaMessage.getLatitude);
        end
        
        function set.Latitude(obj, latitude)
            %set.Latitude Set the value for property Latitude
            validateattributes(latitude, {'numeric'}, {'nonempty', 'scalar'}, 'Waypoint', 'Latitude');
            
            obj.JavaMessage.setLatitude(latitude);
        end
        
        function longitude = get.Longitude(obj)
            %get.Longitude Get the value for property Longitude
            longitude = double(obj.JavaMessage.getLongitude);
        end
        
        function set.Longitude(obj, longitude)
            %set.Longitude Set the value for property Longitude
            validateattributes(longitude, {'numeric'}, {'nonempty', 'scalar'}, 'Waypoint', 'Longitude');
            
            obj.JavaMessage.setLongitude(longitude);
        end
        
        function altitude = get.Altitude(obj)
            %get.Altitude Get the value for property Altitude
            altitude = single(obj.JavaMessage.getAltitude);
        end
        
        function set.Altitude(obj, altitude)
            %set.Altitude Set the value for property Altitude
            validateattributes(altitude, {'numeric'}, {'nonempty', 'scalar'}, 'Waypoint', 'Altitude');
            
            obj.JavaMessage.setAltitude(altitude);
        end
        
        function heading = get.Heading(obj)
            %get.Heading Get the value for property Heading
            heading = int16(obj.JavaMessage.getHeading);
        end
        
        function set.Heading(obj, heading)
            %set.Heading Set the value for property Heading
            validateattributes(heading, {'numeric'}, {'nonempty', 'scalar'}, 'Waypoint', 'Heading');
            
            obj.JavaMessage.setHeading(heading);
        end
        
        function staytime = get.Staytime(obj)
            %get.Staytime Get the value for property Staytime
            staytime = typecast(int16(obj.JavaMessage.getStaytime), 'uint16');
        end
        
        function set.Staytime(obj, staytime)
            %set.Staytime Set the value for property Staytime
            validateattributes(staytime, {'numeric'}, {'nonempty', 'scalar'}, 'Waypoint', 'Staytime');
            
            obj.JavaMessage.setStaytime(staytime);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Latitude = obj.Latitude;
            cpObj.Longitude = obj.Longitude;
            cpObj.Altitude = obj.Altitude;
            cpObj.Heading = obj.Heading;
            cpObj.Staytime = obj.Staytime;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Latitude = strObj.Latitude;
            obj.Longitude = strObj.Longitude;
            obj.Altitude = strObj.Altitude;
            obj.Heading = strObj.Heading;
            obj.Staytime = strObj.Staytime;
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Latitude = obj.Latitude;
            strObj.Longitude = obj.Longitude;
            strObj.Altitude = obj.Altitude;
            strObj.Heading = obj.Heading;
            strObj.Staytime = obj.Staytime;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.djiros.Waypoint.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.djiros.Waypoint;
            obj.reload(strObj);
        end
    end
end
