classdef MissionWaypointTask < ros.Message
    %MissionWaypointTask MATLAB implementation of djiros/MissionWaypointTask
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'djiros/MissionWaypointTask' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'e3b612ec915f7350bc5b69832973b2a3' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant)
        FINISHNOACTION = uint8(0)
        FINISHRETURNTOHOME = uint8(1)
        FINISHAUTOLANDING = uint8(2)
        FINISHRETURNTOPOINT = uint8(3)
        FINISHNOEXIT = uint8(4)
        YAWMODEAUTO = uint8(0)
        YAWMODELOCK = uint8(1)
        YAWMODERC = uint8(2)
        YAWMODEWAYPOINT = uint8(3)
        TRACEPOINT = uint8(0)
        TRACECOORDINATED = uint8(1)
        ACTIONFREE = uint8(0)
        ACTIONAUTO = uint8(1)
        GIMBALPITCHFREE = uint8(0)
        GIMBALPITCHAUTO = uint8(1)
    end
    
    properties (Constant, Access = protected)
        DjirosMissionWaypointClass = ros.msg.internal.MessageFactory.getClassForType('djiros/MissionWaypoint') % Dispatch to MATLAB class for message type djiros/MissionWaypoint
    end
    
    properties (Dependent)
        VelocityRange
        IdleVelocity
        ActionOnFinish
        MissionExecTimes
        YawMode
        TraceMode
        ActionOnRcLost
        GimbalPitchMode
        MissionWaypoint
    end
    
    properties (Access = protected)
        Cache = struct('MissionWaypoint', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'ActionOnFinish', 'ActionOnRcLost', 'GimbalPitchMode', 'IdleVelocity', 'MissionExecTimes', 'MissionWaypoint', 'TraceMode', 'VelocityRange', 'YawMode'} % List of non-constant message properties
        ROSPropertyList = {'action_on_finish', 'action_on_rc_lost', 'gimbal_pitch_mode', 'idle_velocity', 'mission_exec_times', 'mission_waypoint', 'trace_mode', 'velocity_range', 'yaw_mode'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = MissionWaypointTask(msg)
            %MissionWaypointTask Construct the message object MissionWaypointTask
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function velocityrange = get.VelocityRange(obj)
            %get.VelocityRange Get the value for property VelocityRange
            velocityrange = single(obj.JavaMessage.getVelocityRange);
        end
        
        function set.VelocityRange(obj, velocityrange)
            %set.VelocityRange Set the value for property VelocityRange
            validateattributes(velocityrange, {'numeric'}, {'nonempty', 'scalar'}, 'MissionWaypointTask', 'VelocityRange');
            
            obj.JavaMessage.setVelocityRange(velocityrange);
        end
        
        function idlevelocity = get.IdleVelocity(obj)
            %get.IdleVelocity Get the value for property IdleVelocity
            idlevelocity = single(obj.JavaMessage.getIdleVelocity);
        end
        
        function set.IdleVelocity(obj, idlevelocity)
            %set.IdleVelocity Set the value for property IdleVelocity
            validateattributes(idlevelocity, {'numeric'}, {'nonempty', 'scalar'}, 'MissionWaypointTask', 'IdleVelocity');
            
            obj.JavaMessage.setIdleVelocity(idlevelocity);
        end
        
        function actiononfinish = get.ActionOnFinish(obj)
            %get.ActionOnFinish Get the value for property ActionOnFinish
            actiononfinish = typecast(int8(obj.JavaMessage.getActionOnFinish), 'uint8');
        end
        
        function set.ActionOnFinish(obj, actiononfinish)
            %set.ActionOnFinish Set the value for property ActionOnFinish
            validateattributes(actiononfinish, {'numeric'}, {'nonempty', 'scalar'}, 'MissionWaypointTask', 'ActionOnFinish');
            
            obj.JavaMessage.setActionOnFinish(actiononfinish);
        end
        
        function missionexectimes = get.MissionExecTimes(obj)
            %get.MissionExecTimes Get the value for property MissionExecTimes
            missionexectimes = typecast(int8(obj.JavaMessage.getMissionExecTimes), 'uint8');
        end
        
        function set.MissionExecTimes(obj, missionexectimes)
            %set.MissionExecTimes Set the value for property MissionExecTimes
            validateattributes(missionexectimes, {'numeric'}, {'nonempty', 'scalar'}, 'MissionWaypointTask', 'MissionExecTimes');
            
            obj.JavaMessage.setMissionExecTimes(missionexectimes);
        end
        
        function yawmode = get.YawMode(obj)
            %get.YawMode Get the value for property YawMode
            yawmode = typecast(int8(obj.JavaMessage.getYawMode), 'uint8');
        end
        
        function set.YawMode(obj, yawmode)
            %set.YawMode Set the value for property YawMode
            validateattributes(yawmode, {'numeric'}, {'nonempty', 'scalar'}, 'MissionWaypointTask', 'YawMode');
            
            obj.JavaMessage.setYawMode(yawmode);
        end
        
        function tracemode = get.TraceMode(obj)
            %get.TraceMode Get the value for property TraceMode
            tracemode = typecast(int8(obj.JavaMessage.getTraceMode), 'uint8');
        end
        
        function set.TraceMode(obj, tracemode)
            %set.TraceMode Set the value for property TraceMode
            validateattributes(tracemode, {'numeric'}, {'nonempty', 'scalar'}, 'MissionWaypointTask', 'TraceMode');
            
            obj.JavaMessage.setTraceMode(tracemode);
        end
        
        function actiononrclost = get.ActionOnRcLost(obj)
            %get.ActionOnRcLost Get the value for property ActionOnRcLost
            actiononrclost = typecast(int8(obj.JavaMessage.getActionOnRcLost), 'uint8');
        end
        
        function set.ActionOnRcLost(obj, actiononrclost)
            %set.ActionOnRcLost Set the value for property ActionOnRcLost
            validateattributes(actiononrclost, {'numeric'}, {'nonempty', 'scalar'}, 'MissionWaypointTask', 'ActionOnRcLost');
            
            obj.JavaMessage.setActionOnRcLost(actiononrclost);
        end
        
        function gimbalpitchmode = get.GimbalPitchMode(obj)
            %get.GimbalPitchMode Get the value for property GimbalPitchMode
            gimbalpitchmode = typecast(int8(obj.JavaMessage.getGimbalPitchMode), 'uint8');
        end
        
        function set.GimbalPitchMode(obj, gimbalpitchmode)
            %set.GimbalPitchMode Set the value for property GimbalPitchMode
            validateattributes(gimbalpitchmode, {'numeric'}, {'nonempty', 'scalar'}, 'MissionWaypointTask', 'GimbalPitchMode');
            
            obj.JavaMessage.setGimbalPitchMode(gimbalpitchmode);
        end
        
        function missionwaypoint = get.MissionWaypoint(obj)
            %get.MissionWaypoint Get the value for property MissionWaypoint
            if isempty(obj.Cache.MissionWaypoint)
                javaArray = obj.JavaMessage.getMissionWaypoint;
                array = obj.readJavaArray(javaArray, obj.DjirosMissionWaypointClass);
                obj.Cache.MissionWaypoint = feval(obj.DjirosMissionWaypointClass, array);
            end
            missionwaypoint = obj.Cache.MissionWaypoint;
        end
        
        function set.MissionWaypoint(obj, missionwaypoint)
            %set.MissionWaypoint Set the value for property MissionWaypoint
            if ~isvector(missionwaypoint) && isempty(missionwaypoint)
                % Allow empty [] input
                missionwaypoint = feval([obj.DjirosMissionWaypointClass '.empty'], 0, 1);
            end
            
            validateattributes(missionwaypoint, {obj.DjirosMissionWaypointClass}, {'vector'}, 'MissionWaypointTask', 'MissionWaypoint');
            
            javaArray = obj.JavaMessage.getMissionWaypoint;
            array = obj.writeJavaArray(missionwaypoint, javaArray, obj.DjirosMissionWaypointClass);
            obj.JavaMessage.setMissionWaypoint(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.MissionWaypoint)
                obj.Cache.MissionWaypoint = [];
                obj.Cache.MissionWaypoint = obj.MissionWaypoint;
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.MissionWaypoint = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.VelocityRange = obj.VelocityRange;
            cpObj.IdleVelocity = obj.IdleVelocity;
            cpObj.ActionOnFinish = obj.ActionOnFinish;
            cpObj.MissionExecTimes = obj.MissionExecTimes;
            cpObj.YawMode = obj.YawMode;
            cpObj.TraceMode = obj.TraceMode;
            cpObj.ActionOnRcLost = obj.ActionOnRcLost;
            cpObj.GimbalPitchMode = obj.GimbalPitchMode;
            
            % Recursively copy compound properties
            cpObj.MissionWaypoint = copy(obj.MissionWaypoint);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.VelocityRange = strObj.VelocityRange;
            obj.IdleVelocity = strObj.IdleVelocity;
            obj.ActionOnFinish = strObj.ActionOnFinish;
            obj.MissionExecTimes = strObj.MissionExecTimes;
            obj.YawMode = strObj.YawMode;
            obj.TraceMode = strObj.TraceMode;
            obj.ActionOnRcLost = strObj.ActionOnRcLost;
            obj.GimbalPitchMode = strObj.GimbalPitchMode;
            MissionWaypointCell = arrayfun(@(x) feval([obj.DjirosMissionWaypointClass '.loadobj'], x), strObj.MissionWaypoint, 'UniformOutput', false);
            obj.MissionWaypoint = vertcat(MissionWaypointCell{:});
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.VelocityRange = obj.VelocityRange;
            strObj.IdleVelocity = obj.IdleVelocity;
            strObj.ActionOnFinish = obj.ActionOnFinish;
            strObj.MissionExecTimes = obj.MissionExecTimes;
            strObj.YawMode = obj.YawMode;
            strObj.TraceMode = obj.TraceMode;
            strObj.ActionOnRcLost = obj.ActionOnRcLost;
            strObj.GimbalPitchMode = obj.GimbalPitchMode;
            strObj.MissionWaypoint = arrayfun(@(x) saveobj(x), obj.MissionWaypoint);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.djiros.MissionWaypointTask.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.djiros.MissionWaypointTask;
            obj.reload(strObj);
        end
    end
end
