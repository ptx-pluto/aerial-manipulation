classdef MissionHotpointTask < ros.Message
    %MissionHotpointTask MATLAB implementation of djiros/MissionHotpointTask
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'djiros/MissionHotpointTask' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '5700988132c5f205ad38c15800896e84' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        Latitude
        Longitude
        Altitude
        Radius
        AngularSpeed
        IsClockwise
        StartPoint
        YawMode
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Altitude', 'AngularSpeed', 'IsClockwise', 'Latitude', 'Longitude', 'Radius', 'StartPoint', 'YawMode'} % List of non-constant message properties
        ROSPropertyList = {'altitude', 'angular_speed', 'is_clockwise', 'latitude', 'longitude', 'radius', 'start_point', 'yaw_mode'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = MissionHotpointTask(msg)
            %MissionHotpointTask Construct the message object MissionHotpointTask
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function latitude = get.Latitude(obj)
            %get.Latitude Get the value for property Latitude
            latitude = double(obj.JavaMessage.getLatitude);
        end
        
        function set.Latitude(obj, latitude)
            %set.Latitude Set the value for property Latitude
            validateattributes(latitude, {'numeric'}, {'nonempty', 'scalar'}, 'MissionHotpointTask', 'Latitude');
            
            obj.JavaMessage.setLatitude(latitude);
        end
        
        function longitude = get.Longitude(obj)
            %get.Longitude Get the value for property Longitude
            longitude = double(obj.JavaMessage.getLongitude);
        end
        
        function set.Longitude(obj, longitude)
            %set.Longitude Set the value for property Longitude
            validateattributes(longitude, {'numeric'}, {'nonempty', 'scalar'}, 'MissionHotpointTask', 'Longitude');
            
            obj.JavaMessage.setLongitude(longitude);
        end
        
        function altitude = get.Altitude(obj)
            %get.Altitude Get the value for property Altitude
            altitude = double(obj.JavaMessage.getAltitude);
        end
        
        function set.Altitude(obj, altitude)
            %set.Altitude Set the value for property Altitude
            validateattributes(altitude, {'numeric'}, {'nonempty', 'scalar'}, 'MissionHotpointTask', 'Altitude');
            
            obj.JavaMessage.setAltitude(altitude);
        end
        
        function radius = get.Radius(obj)
            %get.Radius Get the value for property Radius
            radius = double(obj.JavaMessage.getRadius);
        end
        
        function set.Radius(obj, radius)
            %set.Radius Set the value for property Radius
            validateattributes(radius, {'numeric'}, {'nonempty', 'scalar'}, 'MissionHotpointTask', 'Radius');
            
            obj.JavaMessage.setRadius(radius);
        end
        
        function angularspeed = get.AngularSpeed(obj)
            %get.AngularSpeed Get the value for property AngularSpeed
            angularspeed = single(obj.JavaMessage.getAngularSpeed);
        end
        
        function set.AngularSpeed(obj, angularspeed)
            %set.AngularSpeed Set the value for property AngularSpeed
            validateattributes(angularspeed, {'numeric'}, {'nonempty', 'scalar'}, 'MissionHotpointTask', 'AngularSpeed');
            
            obj.JavaMessage.setAngularSpeed(angularspeed);
        end
        
        function isclockwise = get.IsClockwise(obj)
            %get.IsClockwise Get the value for property IsClockwise
            isclockwise = typecast(int8(obj.JavaMessage.getIsClockwise), 'uint8');
        end
        
        function set.IsClockwise(obj, isclockwise)
            %set.IsClockwise Set the value for property IsClockwise
            validateattributes(isclockwise, {'numeric'}, {'nonempty', 'scalar'}, 'MissionHotpointTask', 'IsClockwise');
            
            obj.JavaMessage.setIsClockwise(isclockwise);
        end
        
        function startpoint = get.StartPoint(obj)
            %get.StartPoint Get the value for property StartPoint
            startpoint = typecast(int8(obj.JavaMessage.getStartPoint), 'uint8');
        end
        
        function set.StartPoint(obj, startpoint)
            %set.StartPoint Set the value for property StartPoint
            validateattributes(startpoint, {'numeric'}, {'nonempty', 'scalar'}, 'MissionHotpointTask', 'StartPoint');
            
            obj.JavaMessage.setStartPoint(startpoint);
        end
        
        function yawmode = get.YawMode(obj)
            %get.YawMode Get the value for property YawMode
            yawmode = typecast(int8(obj.JavaMessage.getYawMode), 'uint8');
        end
        
        function set.YawMode(obj, yawmode)
            %set.YawMode Set the value for property YawMode
            validateattributes(yawmode, {'numeric'}, {'nonempty', 'scalar'}, 'MissionHotpointTask', 'YawMode');
            
            obj.JavaMessage.setYawMode(yawmode);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Latitude = obj.Latitude;
            cpObj.Longitude = obj.Longitude;
            cpObj.Altitude = obj.Altitude;
            cpObj.Radius = obj.Radius;
            cpObj.AngularSpeed = obj.AngularSpeed;
            cpObj.IsClockwise = obj.IsClockwise;
            cpObj.StartPoint = obj.StartPoint;
            cpObj.YawMode = obj.YawMode;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Latitude = strObj.Latitude;
            obj.Longitude = strObj.Longitude;
            obj.Altitude = strObj.Altitude;
            obj.Radius = strObj.Radius;
            obj.AngularSpeed = strObj.AngularSpeed;
            obj.IsClockwise = strObj.IsClockwise;
            obj.StartPoint = strObj.StartPoint;
            obj.YawMode = strObj.YawMode;
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Latitude = obj.Latitude;
            strObj.Longitude = obj.Longitude;
            strObj.Altitude = obj.Altitude;
            strObj.Radius = obj.Radius;
            strObj.AngularSpeed = obj.AngularSpeed;
            strObj.IsClockwise = obj.IsClockwise;
            strObj.StartPoint = obj.StartPoint;
            strObj.YawMode = obj.YawMode;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.djiros.MissionHotpointTask.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.djiros.MissionHotpointTask;
            obj.reload(strObj);
        end
    end
end
