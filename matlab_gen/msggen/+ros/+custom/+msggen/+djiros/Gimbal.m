classdef Gimbal < ros.Message
    %Gimbal MATLAB implementation of djiros/Gimbal
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'djiros/Gimbal' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '3938e8f6afbe9f01b79e1207db721986' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        StdMsgsHeaderClass = ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        Ts
        Mode
        Pitch
        Yaw
        Roll
    end
    
    properties (Access = protected)
        Cache = struct('Header', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Header', 'Mode', 'Pitch', 'Roll', 'Ts', 'Yaw'} % List of non-constant message properties
        ROSPropertyList = {'header', 'mode', 'pitch', 'roll', 'ts', 'yaw'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = Gimbal(msg)
            %Gimbal Construct the message object Gimbal
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'Gimbal', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function ts = get.Ts(obj)
            %get.Ts Get the value for property Ts
            ts = int32(obj.JavaMessage.getTs);
        end
        
        function set.Ts(obj, ts)
            %set.Ts Set the value for property Ts
            validateattributes(ts, {'numeric'}, {'nonempty', 'scalar'}, 'Gimbal', 'Ts');
            
            obj.JavaMessage.setTs(ts);
        end
        
        function mode = get.Mode(obj)
            %get.Mode Get the value for property Mode
            mode = typecast(int8(obj.JavaMessage.getMode), 'uint8');
        end
        
        function set.Mode(obj, mode)
            %set.Mode Set the value for property Mode
            validateattributes(mode, {'numeric'}, {'nonempty', 'scalar'}, 'Gimbal', 'Mode');
            
            obj.JavaMessage.setMode(mode);
        end
        
        function pitch = get.Pitch(obj)
            %get.Pitch Get the value for property Pitch
            pitch = single(obj.JavaMessage.getPitch);
        end
        
        function set.Pitch(obj, pitch)
            %set.Pitch Set the value for property Pitch
            validateattributes(pitch, {'numeric'}, {'nonempty', 'scalar'}, 'Gimbal', 'Pitch');
            
            obj.JavaMessage.setPitch(pitch);
        end
        
        function yaw = get.Yaw(obj)
            %get.Yaw Get the value for property Yaw
            yaw = single(obj.JavaMessage.getYaw);
        end
        
        function set.Yaw(obj, yaw)
            %set.Yaw Set the value for property Yaw
            validateattributes(yaw, {'numeric'}, {'nonempty', 'scalar'}, 'Gimbal', 'Yaw');
            
            obj.JavaMessage.setYaw(yaw);
        end
        
        function roll = get.Roll(obj)
            %get.Roll Get the value for property Roll
            roll = single(obj.JavaMessage.getRoll);
        end
        
        function set.Roll(obj, roll)
            %set.Roll Set the value for property Roll
            validateattributes(roll, {'numeric'}, {'nonempty', 'scalar'}, 'Gimbal', 'Roll');
            
            obj.JavaMessage.setRoll(roll);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Ts = obj.Ts;
            cpObj.Mode = obj.Mode;
            cpObj.Pitch = obj.Pitch;
            cpObj.Yaw = obj.Yaw;
            cpObj.Roll = obj.Roll;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Ts = strObj.Ts;
            obj.Mode = strObj.Mode;
            obj.Pitch = strObj.Pitch;
            obj.Yaw = strObj.Yaw;
            obj.Roll = strObj.Roll;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Ts = obj.Ts;
            strObj.Mode = obj.Mode;
            strObj.Pitch = obj.Pitch;
            strObj.Yaw = obj.Yaw;
            strObj.Roll = obj.Roll;
            strObj.Header = saveobj(obj.Header);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.djiros.Gimbal.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.djiros.Gimbal;
            obj.reload(strObj);
        end
    end
end
