classdef MissionWaypoint < ros.Message
    %MissionWaypoint MATLAB implementation of djiros/MissionWaypoint
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'djiros/MissionWaypoint' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '97d256fd4faba4cc9b1b481e112e0e54' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        DjirosMissionWaypointActionClass = ros.msg.internal.MessageFactory.getClassForType('djiros/MissionWaypointAction') % Dispatch to MATLAB class for message type djiros/MissionWaypointAction
    end
    
    properties (Dependent)
        Latitude
        Longitude
        Altitude
        DampingDistance
        TargetYaw
        TargetGimbalPitch
        TurnMode
        HasAction
        ActionTimeLimit
        WaypointAction
    end
    
    properties (Access = protected)
        Cache = struct('WaypointAction', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'ActionTimeLimit', 'Altitude', 'DampingDistance', 'HasAction', 'Latitude', 'Longitude', 'TargetGimbalPitch', 'TargetYaw', 'TurnMode', 'WaypointAction'} % List of non-constant message properties
        ROSPropertyList = {'action_time_limit', 'altitude', 'damping_distance', 'has_action', 'latitude', 'longitude', 'target_gimbal_pitch', 'target_yaw', 'turn_mode', 'waypoint_action'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = MissionWaypoint(msg)
            %MissionWaypoint Construct the message object MissionWaypoint
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function latitude = get.Latitude(obj)
            %get.Latitude Get the value for property Latitude
            latitude = double(obj.JavaMessage.getLatitude);
        end
        
        function set.Latitude(obj, latitude)
            %set.Latitude Set the value for property Latitude
            validateattributes(latitude, {'numeric'}, {'nonempty', 'scalar'}, 'MissionWaypoint', 'Latitude');
            
            obj.JavaMessage.setLatitude(latitude);
        end
        
        function longitude = get.Longitude(obj)
            %get.Longitude Get the value for property Longitude
            longitude = double(obj.JavaMessage.getLongitude);
        end
        
        function set.Longitude(obj, longitude)
            %set.Longitude Set the value for property Longitude
            validateattributes(longitude, {'numeric'}, {'nonempty', 'scalar'}, 'MissionWaypoint', 'Longitude');
            
            obj.JavaMessage.setLongitude(longitude);
        end
        
        function altitude = get.Altitude(obj)
            %get.Altitude Get the value for property Altitude
            altitude = single(obj.JavaMessage.getAltitude);
        end
        
        function set.Altitude(obj, altitude)
            %set.Altitude Set the value for property Altitude
            validateattributes(altitude, {'numeric'}, {'nonempty', 'scalar'}, 'MissionWaypoint', 'Altitude');
            
            obj.JavaMessage.setAltitude(altitude);
        end
        
        function dampingdistance = get.DampingDistance(obj)
            %get.DampingDistance Get the value for property DampingDistance
            dampingdistance = single(obj.JavaMessage.getDampingDistance);
        end
        
        function set.DampingDistance(obj, dampingdistance)
            %set.DampingDistance Set the value for property DampingDistance
            validateattributes(dampingdistance, {'numeric'}, {'nonempty', 'scalar'}, 'MissionWaypoint', 'DampingDistance');
            
            obj.JavaMessage.setDampingDistance(dampingdistance);
        end
        
        function targetyaw = get.TargetYaw(obj)
            %get.TargetYaw Get the value for property TargetYaw
            targetyaw = int16(obj.JavaMessage.getTargetYaw);
        end
        
        function set.TargetYaw(obj, targetyaw)
            %set.TargetYaw Set the value for property TargetYaw
            validateattributes(targetyaw, {'numeric'}, {'nonempty', 'scalar'}, 'MissionWaypoint', 'TargetYaw');
            
            obj.JavaMessage.setTargetYaw(targetyaw);
        end
        
        function targetgimbalpitch = get.TargetGimbalPitch(obj)
            %get.TargetGimbalPitch Get the value for property TargetGimbalPitch
            targetgimbalpitch = int16(obj.JavaMessage.getTargetGimbalPitch);
        end
        
        function set.TargetGimbalPitch(obj, targetgimbalpitch)
            %set.TargetGimbalPitch Set the value for property TargetGimbalPitch
            validateattributes(targetgimbalpitch, {'numeric'}, {'nonempty', 'scalar'}, 'MissionWaypoint', 'TargetGimbalPitch');
            
            obj.JavaMessage.setTargetGimbalPitch(targetgimbalpitch);
        end
        
        function turnmode = get.TurnMode(obj)
            %get.TurnMode Get the value for property TurnMode
            turnmode = typecast(int8(obj.JavaMessage.getTurnMode), 'uint8');
        end
        
        function set.TurnMode(obj, turnmode)
            %set.TurnMode Set the value for property TurnMode
            validateattributes(turnmode, {'numeric'}, {'nonempty', 'scalar'}, 'MissionWaypoint', 'TurnMode');
            
            obj.JavaMessage.setTurnMode(turnmode);
        end
        
        function hasaction = get.HasAction(obj)
            %get.HasAction Get the value for property HasAction
            hasaction = typecast(int8(obj.JavaMessage.getHasAction), 'uint8');
        end
        
        function set.HasAction(obj, hasaction)
            %set.HasAction Set the value for property HasAction
            validateattributes(hasaction, {'numeric'}, {'nonempty', 'scalar'}, 'MissionWaypoint', 'HasAction');
            
            obj.JavaMessage.setHasAction(hasaction);
        end
        
        function actiontimelimit = get.ActionTimeLimit(obj)
            %get.ActionTimeLimit Get the value for property ActionTimeLimit
            actiontimelimit = typecast(int16(obj.JavaMessage.getActionTimeLimit), 'uint16');
        end
        
        function set.ActionTimeLimit(obj, actiontimelimit)
            %set.ActionTimeLimit Set the value for property ActionTimeLimit
            validateattributes(actiontimelimit, {'numeric'}, {'nonempty', 'scalar'}, 'MissionWaypoint', 'ActionTimeLimit');
            
            obj.JavaMessage.setActionTimeLimit(actiontimelimit);
        end
        
        function waypointaction = get.WaypointAction(obj)
            %get.WaypointAction Get the value for property WaypointAction
            if isempty(obj.Cache.WaypointAction)
                obj.Cache.WaypointAction = feval(obj.DjirosMissionWaypointActionClass, obj.JavaMessage.getWaypointAction);
            end
            waypointaction = obj.Cache.WaypointAction;
        end
        
        function set.WaypointAction(obj, waypointaction)
            %set.WaypointAction Set the value for property WaypointAction
            validateattributes(waypointaction, {obj.DjirosMissionWaypointActionClass}, {'nonempty', 'scalar'}, 'MissionWaypoint', 'WaypointAction');
            
            obj.JavaMessage.setWaypointAction(waypointaction.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.WaypointAction)
                obj.Cache.WaypointAction.setJavaObject(waypointaction.getJavaObject);
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.WaypointAction = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Latitude = obj.Latitude;
            cpObj.Longitude = obj.Longitude;
            cpObj.Altitude = obj.Altitude;
            cpObj.DampingDistance = obj.DampingDistance;
            cpObj.TargetYaw = obj.TargetYaw;
            cpObj.TargetGimbalPitch = obj.TargetGimbalPitch;
            cpObj.TurnMode = obj.TurnMode;
            cpObj.HasAction = obj.HasAction;
            cpObj.ActionTimeLimit = obj.ActionTimeLimit;
            
            % Recursively copy compound properties
            cpObj.WaypointAction = copy(obj.WaypointAction);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Latitude = strObj.Latitude;
            obj.Longitude = strObj.Longitude;
            obj.Altitude = strObj.Altitude;
            obj.DampingDistance = strObj.DampingDistance;
            obj.TargetYaw = strObj.TargetYaw;
            obj.TargetGimbalPitch = strObj.TargetGimbalPitch;
            obj.TurnMode = strObj.TurnMode;
            obj.HasAction = strObj.HasAction;
            obj.ActionTimeLimit = strObj.ActionTimeLimit;
            obj.WaypointAction = feval([obj.DjirosMissionWaypointActionClass '.loadobj'], strObj.WaypointAction);
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Latitude = obj.Latitude;
            strObj.Longitude = obj.Longitude;
            strObj.Altitude = obj.Altitude;
            strObj.DampingDistance = obj.DampingDistance;
            strObj.TargetYaw = obj.TargetYaw;
            strObj.TargetGimbalPitch = obj.TargetGimbalPitch;
            strObj.TurnMode = obj.TurnMode;
            strObj.HasAction = obj.HasAction;
            strObj.ActionTimeLimit = obj.ActionTimeLimit;
            strObj.WaypointAction = saveobj(obj.WaypointAction);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.djiros.MissionWaypoint.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.djiros.MissionWaypoint;
            obj.reload(strObj);
        end
    end
end
