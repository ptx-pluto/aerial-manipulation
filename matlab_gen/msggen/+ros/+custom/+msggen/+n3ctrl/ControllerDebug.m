classdef ControllerDebug < ros.Message
    %ControllerDebug MATLAB implementation of n3ctrl/ControllerDebug
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'n3ctrl/ControllerDebug' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '2879e490b09bd2d41232bc7fbaf6a3c1' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        GeometryMsgsVector3Class = ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Vector3') % Dispatch to MATLAB class for message type geometry_msgs/Vector3
        StdMsgsHeaderClass = ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        DesP
        UPP
        UPI
        UP
        DesV
        UVP
        UVI
        UV
        KPP
        KPI
        KVP
        KVI
    end
    
    properties (Access = protected)
        Cache = struct('Header', [], 'DesP', [], 'UPP', [], 'UPI', [], 'UP', [], 'DesV', [], 'UVP', [], 'UVI', [], 'UV', [], 'KPP', [], 'KPI', [], 'KVP', [], 'KVI', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'DesP', 'DesV', 'Header', 'KPI', 'KPP', 'KVI', 'KVP', 'UP', 'UPI', 'UPP', 'UV', 'UVI', 'UVP'} % List of non-constant message properties
        ROSPropertyList = {'des_p', 'des_v', 'header', 'k_p_i', 'k_p_p', 'k_v_i', 'k_v_p', 'u_p', 'u_p_i', 'u_p_p', 'u_v', 'u_v_i', 'u_v_p'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = ControllerDebug(msg)
            %ControllerDebug Construct the message object ControllerDebug
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'ControllerDebug', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function desp = get.DesP(obj)
            %get.DesP Get the value for property DesP
            if isempty(obj.Cache.DesP)
                obj.Cache.DesP = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getDesP);
            end
            desp = obj.Cache.DesP;
        end
        
        function set.DesP(obj, desp)
            %set.DesP Set the value for property DesP
            validateattributes(desp, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'ControllerDebug', 'DesP');
            
            obj.JavaMessage.setDesP(desp.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.DesP)
                obj.Cache.DesP.setJavaObject(desp.getJavaObject);
            end
        end
        
        function upp = get.UPP(obj)
            %get.UPP Get the value for property UPP
            if isempty(obj.Cache.UPP)
                obj.Cache.UPP = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getUPP);
            end
            upp = obj.Cache.UPP;
        end
        
        function set.UPP(obj, upp)
            %set.UPP Set the value for property UPP
            validateattributes(upp, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'ControllerDebug', 'UPP');
            
            obj.JavaMessage.setUPP(upp.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.UPP)
                obj.Cache.UPP.setJavaObject(upp.getJavaObject);
            end
        end
        
        function upi = get.UPI(obj)
            %get.UPI Get the value for property UPI
            if isempty(obj.Cache.UPI)
                obj.Cache.UPI = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getUPI);
            end
            upi = obj.Cache.UPI;
        end
        
        function set.UPI(obj, upi)
            %set.UPI Set the value for property UPI
            validateattributes(upi, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'ControllerDebug', 'UPI');
            
            obj.JavaMessage.setUPI(upi.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.UPI)
                obj.Cache.UPI.setJavaObject(upi.getJavaObject);
            end
        end
        
        function up = get.UP(obj)
            %get.UP Get the value for property UP
            if isempty(obj.Cache.UP)
                obj.Cache.UP = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getUP);
            end
            up = obj.Cache.UP;
        end
        
        function set.UP(obj, up)
            %set.UP Set the value for property UP
            validateattributes(up, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'ControllerDebug', 'UP');
            
            obj.JavaMessage.setUP(up.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.UP)
                obj.Cache.UP.setJavaObject(up.getJavaObject);
            end
        end
        
        function desv = get.DesV(obj)
            %get.DesV Get the value for property DesV
            if isempty(obj.Cache.DesV)
                obj.Cache.DesV = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getDesV);
            end
            desv = obj.Cache.DesV;
        end
        
        function set.DesV(obj, desv)
            %set.DesV Set the value for property DesV
            validateattributes(desv, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'ControllerDebug', 'DesV');
            
            obj.JavaMessage.setDesV(desv.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.DesV)
                obj.Cache.DesV.setJavaObject(desv.getJavaObject);
            end
        end
        
        function uvp = get.UVP(obj)
            %get.UVP Get the value for property UVP
            if isempty(obj.Cache.UVP)
                obj.Cache.UVP = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getUVP);
            end
            uvp = obj.Cache.UVP;
        end
        
        function set.UVP(obj, uvp)
            %set.UVP Set the value for property UVP
            validateattributes(uvp, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'ControllerDebug', 'UVP');
            
            obj.JavaMessage.setUVP(uvp.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.UVP)
                obj.Cache.UVP.setJavaObject(uvp.getJavaObject);
            end
        end
        
        function uvi = get.UVI(obj)
            %get.UVI Get the value for property UVI
            if isempty(obj.Cache.UVI)
                obj.Cache.UVI = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getUVI);
            end
            uvi = obj.Cache.UVI;
        end
        
        function set.UVI(obj, uvi)
            %set.UVI Set the value for property UVI
            validateattributes(uvi, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'ControllerDebug', 'UVI');
            
            obj.JavaMessage.setUVI(uvi.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.UVI)
                obj.Cache.UVI.setJavaObject(uvi.getJavaObject);
            end
        end
        
        function uv = get.UV(obj)
            %get.UV Get the value for property UV
            if isempty(obj.Cache.UV)
                obj.Cache.UV = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getUV);
            end
            uv = obj.Cache.UV;
        end
        
        function set.UV(obj, uv)
            %set.UV Set the value for property UV
            validateattributes(uv, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'ControllerDebug', 'UV');
            
            obj.JavaMessage.setUV(uv.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.UV)
                obj.Cache.UV.setJavaObject(uv.getJavaObject);
            end
        end
        
        function kpp = get.KPP(obj)
            %get.KPP Get the value for property KPP
            if isempty(obj.Cache.KPP)
                obj.Cache.KPP = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getKPP);
            end
            kpp = obj.Cache.KPP;
        end
        
        function set.KPP(obj, kpp)
            %set.KPP Set the value for property KPP
            validateattributes(kpp, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'ControllerDebug', 'KPP');
            
            obj.JavaMessage.setKPP(kpp.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.KPP)
                obj.Cache.KPP.setJavaObject(kpp.getJavaObject);
            end
        end
        
        function kpi = get.KPI(obj)
            %get.KPI Get the value for property KPI
            if isempty(obj.Cache.KPI)
                obj.Cache.KPI = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getKPI);
            end
            kpi = obj.Cache.KPI;
        end
        
        function set.KPI(obj, kpi)
            %set.KPI Set the value for property KPI
            validateattributes(kpi, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'ControllerDebug', 'KPI');
            
            obj.JavaMessage.setKPI(kpi.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.KPI)
                obj.Cache.KPI.setJavaObject(kpi.getJavaObject);
            end
        end
        
        function kvp = get.KVP(obj)
            %get.KVP Get the value for property KVP
            if isempty(obj.Cache.KVP)
                obj.Cache.KVP = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getKVP);
            end
            kvp = obj.Cache.KVP;
        end
        
        function set.KVP(obj, kvp)
            %set.KVP Set the value for property KVP
            validateattributes(kvp, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'ControllerDebug', 'KVP');
            
            obj.JavaMessage.setKVP(kvp.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.KVP)
                obj.Cache.KVP.setJavaObject(kvp.getJavaObject);
            end
        end
        
        function kvi = get.KVI(obj)
            %get.KVI Get the value for property KVI
            if isempty(obj.Cache.KVI)
                obj.Cache.KVI = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getKVI);
            end
            kvi = obj.Cache.KVI;
        end
        
        function set.KVI(obj, kvi)
            %set.KVI Set the value for property KVI
            validateattributes(kvi, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'ControllerDebug', 'KVI');
            
            obj.JavaMessage.setKVI(kvi.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.KVI)
                obj.Cache.KVI.setJavaObject(kvi.getJavaObject);
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
            obj.Cache.DesP = [];
            obj.Cache.UPP = [];
            obj.Cache.UPI = [];
            obj.Cache.UP = [];
            obj.Cache.DesV = [];
            obj.Cache.UVP = [];
            obj.Cache.UVI = [];
            obj.Cache.UV = [];
            obj.Cache.KPP = [];
            obj.Cache.KPI = [];
            obj.Cache.KVP = [];
            obj.Cache.KVI = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
            cpObj.DesP = copy(obj.DesP);
            cpObj.UPP = copy(obj.UPP);
            cpObj.UPI = copy(obj.UPI);
            cpObj.UP = copy(obj.UP);
            cpObj.DesV = copy(obj.DesV);
            cpObj.UVP = copy(obj.UVP);
            cpObj.UVI = copy(obj.UVI);
            cpObj.UV = copy(obj.UV);
            cpObj.KPP = copy(obj.KPP);
            cpObj.KPI = copy(obj.KPI);
            cpObj.KVP = copy(obj.KVP);
            cpObj.KVI = copy(obj.KVI);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
            obj.DesP = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.DesP);
            obj.UPP = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.UPP);
            obj.UPI = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.UPI);
            obj.UP = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.UP);
            obj.DesV = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.DesV);
            obj.UVP = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.UVP);
            obj.UVI = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.UVI);
            obj.UV = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.UV);
            obj.KPP = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.KPP);
            obj.KPI = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.KPI);
            obj.KVP = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.KVP);
            obj.KVI = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.KVI);
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Header = saveobj(obj.Header);
            strObj.DesP = saveobj(obj.DesP);
            strObj.UPP = saveobj(obj.UPP);
            strObj.UPI = saveobj(obj.UPI);
            strObj.UP = saveobj(obj.UP);
            strObj.DesV = saveobj(obj.DesV);
            strObj.UVP = saveobj(obj.UVP);
            strObj.UVI = saveobj(obj.UVI);
            strObj.UV = saveobj(obj.UV);
            strObj.KPP = saveobj(obj.KPP);
            strObj.KPI = saveobj(obj.KPI);
            strObj.KVP = saveobj(obj.KVP);
            strObj.KVI = saveobj(obj.KVI);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.n3ctrl.ControllerDebug.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.n3ctrl.ControllerDebug;
            obj.reload(strObj);
        end
    end
end
