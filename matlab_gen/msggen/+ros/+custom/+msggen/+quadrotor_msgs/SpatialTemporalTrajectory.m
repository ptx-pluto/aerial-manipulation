classdef SpatialTemporalTrajectory < ros.Message
    %SpatialTemporalTrajectory MATLAB implementation of quadrotor_msgs/SpatialTemporalTrajectory
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'quadrotor_msgs/SpatialTemporalTrajectory' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '83bb3014c3955b8c85e7aaebbe585ea5' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant)
        ACTIONADD = uint32(1)
        ACTIONABORT = uint32(2)
        ACTIONWARNSTART = uint32(3)
        ACTIONWARNFINAL = uint32(4)
        ACTIONWARNIMPOSSIBLE = uint32(5)
    end
    
    properties (Constant, Access = protected)
        StdMsgsHeaderClass = ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
        TimeClass = ros.msg.internal.MessageFactory.getClassForType('time') % Dispatch to MATLAB class for message type time
    end
    
    properties (Dependent)
        Header
        StartTime
        FinalTime
        TrajectoryId
        Action
        KMax
        SStep
        NumOrder
        NumSegment
        StartYaw
        FinalYaw
        MagCoeff
        DebugInfo
        K
        A
        B
        S
        Time
        TimeAcc
        CoefX
        CoefY
        CoefZ
        Range
        Order
    end
    
    properties (Access = protected)
        Cache = struct('Header', [], 'StartTime', [], 'FinalTime', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'A', 'Action', 'B', 'CoefX', 'CoefY', 'CoefZ', 'DebugInfo', 'FinalTime', 'FinalYaw', 'Header', 'K', 'KMax', 'MagCoeff', 'NumOrder', 'NumSegment', 'Order', 'Range', 'S', 'SStep', 'StartTime', 'StartYaw', 'Time', 'TimeAcc', 'TrajectoryId'} % List of non-constant message properties
        ROSPropertyList = {'a', 'action', 'b', 'coef_x', 'coef_y', 'coef_z', 'debug_info', 'final_time', 'final_yaw', 'header', 'K', 'K_max', 'mag_coeff', 'num_order', 'num_segment', 'order', 'range', 's', 's_step', 'start_time', 'start_yaw', 'time', 'time_acc', 'trajectory_id'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = SpatialTemporalTrajectory(msg)
            %SpatialTemporalTrajectory Construct the message object SpatialTemporalTrajectory
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'SpatialTemporalTrajectory', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function starttime = get.StartTime(obj)
            %get.StartTime Get the value for property StartTime
            if isempty(obj.Cache.StartTime)
                obj.Cache.StartTime = feval(obj.TimeClass, obj.JavaMessage.getStartTime);
            end
            starttime = obj.Cache.StartTime;
        end
        
        function set.StartTime(obj, starttime)
            %set.StartTime Set the value for property StartTime
            validateattributes(starttime, {obj.TimeClass}, {'nonempty', 'scalar'}, 'SpatialTemporalTrajectory', 'StartTime');
            
            obj.JavaMessage.setStartTime(starttime.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.StartTime)
                obj.Cache.StartTime.setJavaObject(starttime.getJavaObject);
            end
        end
        
        function finaltime = get.FinalTime(obj)
            %get.FinalTime Get the value for property FinalTime
            if isempty(obj.Cache.FinalTime)
                obj.Cache.FinalTime = feval(obj.TimeClass, obj.JavaMessage.getFinalTime);
            end
            finaltime = obj.Cache.FinalTime;
        end
        
        function set.FinalTime(obj, finaltime)
            %set.FinalTime Set the value for property FinalTime
            validateattributes(finaltime, {obj.TimeClass}, {'nonempty', 'scalar'}, 'SpatialTemporalTrajectory', 'FinalTime');
            
            obj.JavaMessage.setFinalTime(finaltime.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.FinalTime)
                obj.Cache.FinalTime.setJavaObject(finaltime.getJavaObject);
            end
        end
        
        function trajectoryid = get.TrajectoryId(obj)
            %get.TrajectoryId Get the value for property TrajectoryId
            trajectoryid = typecast(int32(obj.JavaMessage.getTrajectoryId), 'uint32');
        end
        
        function set.TrajectoryId(obj, trajectoryid)
            %set.TrajectoryId Set the value for property TrajectoryId
            validateattributes(trajectoryid, {'numeric'}, {'nonempty', 'scalar'}, 'SpatialTemporalTrajectory', 'TrajectoryId');
            
            obj.JavaMessage.setTrajectoryId(trajectoryid);
        end
        
        function action = get.Action(obj)
            %get.Action Get the value for property Action
            action = typecast(int32(obj.JavaMessage.getAction), 'uint32');
        end
        
        function set.Action(obj, action)
            %set.Action Set the value for property Action
            validateattributes(action, {'numeric'}, {'nonempty', 'scalar'}, 'SpatialTemporalTrajectory', 'Action');
            
            obj.JavaMessage.setAction(action);
        end
        
        function kmax = get.KMax(obj)
            %get.KMax Get the value for property KMax
            kmax = int32(obj.JavaMessage.getKMax);
        end
        
        function set.KMax(obj, kmax)
            %set.KMax Set the value for property KMax
            validateattributes(kmax, {'numeric'}, {'nonempty', 'scalar'}, 'SpatialTemporalTrajectory', 'KMax');
            
            obj.JavaMessage.setKMax(kmax);
        end
        
        function sstep = get.SStep(obj)
            %get.SStep Get the value for property SStep
            sstep = double(obj.JavaMessage.getSStep);
        end
        
        function set.SStep(obj, sstep)
            %set.SStep Set the value for property SStep
            validateattributes(sstep, {'numeric'}, {'nonempty', 'scalar'}, 'SpatialTemporalTrajectory', 'SStep');
            
            obj.JavaMessage.setSStep(sstep);
        end
        
        function numorder = get.NumOrder(obj)
            %get.NumOrder Get the value for property NumOrder
            numorder = typecast(int32(obj.JavaMessage.getNumOrder), 'uint32');
        end
        
        function set.NumOrder(obj, numorder)
            %set.NumOrder Set the value for property NumOrder
            validateattributes(numorder, {'numeric'}, {'nonempty', 'scalar'}, 'SpatialTemporalTrajectory', 'NumOrder');
            
            obj.JavaMessage.setNumOrder(numorder);
        end
        
        function numsegment = get.NumSegment(obj)
            %get.NumSegment Get the value for property NumSegment
            numsegment = typecast(int32(obj.JavaMessage.getNumSegment), 'uint32');
        end
        
        function set.NumSegment(obj, numsegment)
            %set.NumSegment Set the value for property NumSegment
            validateattributes(numsegment, {'numeric'}, {'nonempty', 'scalar'}, 'SpatialTemporalTrajectory', 'NumSegment');
            
            obj.JavaMessage.setNumSegment(numsegment);
        end
        
        function startyaw = get.StartYaw(obj)
            %get.StartYaw Get the value for property StartYaw
            startyaw = double(obj.JavaMessage.getStartYaw);
        end
        
        function set.StartYaw(obj, startyaw)
            %set.StartYaw Set the value for property StartYaw
            validateattributes(startyaw, {'numeric'}, {'nonempty', 'scalar'}, 'SpatialTemporalTrajectory', 'StartYaw');
            
            obj.JavaMessage.setStartYaw(startyaw);
        end
        
        function finalyaw = get.FinalYaw(obj)
            %get.FinalYaw Get the value for property FinalYaw
            finalyaw = double(obj.JavaMessage.getFinalYaw);
        end
        
        function set.FinalYaw(obj, finalyaw)
            %set.FinalYaw Set the value for property FinalYaw
            validateattributes(finalyaw, {'numeric'}, {'nonempty', 'scalar'}, 'SpatialTemporalTrajectory', 'FinalYaw');
            
            obj.JavaMessage.setFinalYaw(finalyaw);
        end
        
        function magcoeff = get.MagCoeff(obj)
            %get.MagCoeff Get the value for property MagCoeff
            magcoeff = double(obj.JavaMessage.getMagCoeff);
        end
        
        function set.MagCoeff(obj, magcoeff)
            %set.MagCoeff Set the value for property MagCoeff
            validateattributes(magcoeff, {'numeric'}, {'nonempty', 'scalar'}, 'SpatialTemporalTrajectory', 'MagCoeff');
            
            obj.JavaMessage.setMagCoeff(magcoeff);
        end
        
        function debuginfo = get.DebugInfo(obj)
            %get.DebugInfo Get the value for property DebugInfo
            debuginfo = char(obj.JavaMessage.getDebugInfo);
        end
        
        function set.DebugInfo(obj, debuginfo)
            %set.DebugInfo Set the value for property DebugInfo
            debuginfo = convertStringsToChars(debuginfo);
            
            validateattributes(debuginfo, {'char', 'string'}, {}, 'SpatialTemporalTrajectory', 'DebugInfo');
            
            obj.JavaMessage.setDebugInfo(debuginfo);
        end
        
        function k = get.K(obj)
            %get.K Get the value for property K
            javaArray = obj.JavaMessage.getK;
            array = obj.readJavaArray(javaArray, 'int32');
            k = int32(array);
        end
        
        function set.K(obj, k)
            %set.K Set the value for property K
            if ~isvector(k) && isempty(k)
                % Allow empty [] input
                k = int32.empty(0,1);
            end
            
            validateattributes(k, {'numeric'}, {'vector'}, 'SpatialTemporalTrajectory', 'K');
            
            javaArray = obj.JavaMessage.getK;
            array = obj.writeJavaArray(k, javaArray, 'int32');
            obj.JavaMessage.setK(array);
        end
        
        function a = get.A(obj)
            %get.A Get the value for property A
            javaArray = obj.JavaMessage.getA;
            array = obj.readJavaArray(javaArray, 'double');
            a = double(array);
        end
        
        function set.A(obj, a)
            %set.A Set the value for property A
            if ~isvector(a) && isempty(a)
                % Allow empty [] input
                a = double.empty(0,1);
            end
            
            validateattributes(a, {'numeric'}, {'vector'}, 'SpatialTemporalTrajectory', 'A');
            
            javaArray = obj.JavaMessage.getA;
            array = obj.writeJavaArray(a, javaArray, 'double');
            obj.JavaMessage.setA(array);
        end
        
        function b = get.B(obj)
            %get.B Get the value for property B
            javaArray = obj.JavaMessage.getB;
            array = obj.readJavaArray(javaArray, 'double');
            b = double(array);
        end
        
        function set.B(obj, b)
            %set.B Set the value for property B
            if ~isvector(b) && isempty(b)
                % Allow empty [] input
                b = double.empty(0,1);
            end
            
            validateattributes(b, {'numeric'}, {'vector'}, 'SpatialTemporalTrajectory', 'B');
            
            javaArray = obj.JavaMessage.getB;
            array = obj.writeJavaArray(b, javaArray, 'double');
            obj.JavaMessage.setB(array);
        end
        
        function s = get.S(obj)
            %get.S Get the value for property S
            javaArray = obj.JavaMessage.getS;
            array = obj.readJavaArray(javaArray, 'double');
            s = double(array);
        end
        
        function set.S(obj, s)
            %set.S Set the value for property S
            if ~isvector(s) && isempty(s)
                % Allow empty [] input
                s = double.empty(0,1);
            end
            
            validateattributes(s, {'numeric'}, {'vector'}, 'SpatialTemporalTrajectory', 'S');
            
            javaArray = obj.JavaMessage.getS;
            array = obj.writeJavaArray(s, javaArray, 'double');
            obj.JavaMessage.setS(array);
        end
        
        function time = get.Time(obj)
            %get.Time Get the value for property Time
            javaArray = obj.JavaMessage.getTime;
            array = obj.readJavaArray(javaArray, 'double');
            time = double(array);
        end
        
        function set.Time(obj, time)
            %set.Time Set the value for property Time
            if ~isvector(time) && isempty(time)
                % Allow empty [] input
                time = double.empty(0,1);
            end
            
            validateattributes(time, {'numeric'}, {'vector'}, 'SpatialTemporalTrajectory', 'Time');
            
            javaArray = obj.JavaMessage.getTime;
            array = obj.writeJavaArray(time, javaArray, 'double');
            obj.JavaMessage.setTime(array);
        end
        
        function timeacc = get.TimeAcc(obj)
            %get.TimeAcc Get the value for property TimeAcc
            javaArray = obj.JavaMessage.getTimeAcc;
            array = obj.readJavaArray(javaArray, 'double');
            timeacc = double(array);
        end
        
        function set.TimeAcc(obj, timeacc)
            %set.TimeAcc Set the value for property TimeAcc
            if ~isvector(timeacc) && isempty(timeacc)
                % Allow empty [] input
                timeacc = double.empty(0,1);
            end
            
            validateattributes(timeacc, {'numeric'}, {'vector'}, 'SpatialTemporalTrajectory', 'TimeAcc');
            
            javaArray = obj.JavaMessage.getTimeAcc;
            array = obj.writeJavaArray(timeacc, javaArray, 'double');
            obj.JavaMessage.setTimeAcc(array);
        end
        
        function coefx = get.CoefX(obj)
            %get.CoefX Get the value for property CoefX
            javaArray = obj.JavaMessage.getCoefX;
            array = obj.readJavaArray(javaArray, 'double');
            coefx = double(array);
        end
        
        function set.CoefX(obj, coefx)
            %set.CoefX Set the value for property CoefX
            if ~isvector(coefx) && isempty(coefx)
                % Allow empty [] input
                coefx = double.empty(0,1);
            end
            
            validateattributes(coefx, {'numeric'}, {'vector'}, 'SpatialTemporalTrajectory', 'CoefX');
            
            javaArray = obj.JavaMessage.getCoefX;
            array = obj.writeJavaArray(coefx, javaArray, 'double');
            obj.JavaMessage.setCoefX(array);
        end
        
        function coefy = get.CoefY(obj)
            %get.CoefY Get the value for property CoefY
            javaArray = obj.JavaMessage.getCoefY;
            array = obj.readJavaArray(javaArray, 'double');
            coefy = double(array);
        end
        
        function set.CoefY(obj, coefy)
            %set.CoefY Set the value for property CoefY
            if ~isvector(coefy) && isempty(coefy)
                % Allow empty [] input
                coefy = double.empty(0,1);
            end
            
            validateattributes(coefy, {'numeric'}, {'vector'}, 'SpatialTemporalTrajectory', 'CoefY');
            
            javaArray = obj.JavaMessage.getCoefY;
            array = obj.writeJavaArray(coefy, javaArray, 'double');
            obj.JavaMessage.setCoefY(array);
        end
        
        function coefz = get.CoefZ(obj)
            %get.CoefZ Get the value for property CoefZ
            javaArray = obj.JavaMessage.getCoefZ;
            array = obj.readJavaArray(javaArray, 'double');
            coefz = double(array);
        end
        
        function set.CoefZ(obj, coefz)
            %set.CoefZ Set the value for property CoefZ
            if ~isvector(coefz) && isempty(coefz)
                % Allow empty [] input
                coefz = double.empty(0,1);
            end
            
            validateattributes(coefz, {'numeric'}, {'vector'}, 'SpatialTemporalTrajectory', 'CoefZ');
            
            javaArray = obj.JavaMessage.getCoefZ;
            array = obj.writeJavaArray(coefz, javaArray, 'double');
            obj.JavaMessage.setCoefZ(array);
        end
        
        function range = get.Range(obj)
            %get.Range Get the value for property Range
            javaArray = obj.JavaMessage.getRange;
            array = obj.readJavaArray(javaArray, 'double');
            range = double(array);
        end
        
        function set.Range(obj, range)
            %set.Range Set the value for property Range
            if ~isvector(range) && isempty(range)
                % Allow empty [] input
                range = double.empty(0,1);
            end
            
            validateattributes(range, {'numeric'}, {'vector'}, 'SpatialTemporalTrajectory', 'Range');
            
            javaArray = obj.JavaMessage.getRange;
            array = obj.writeJavaArray(range, javaArray, 'double');
            obj.JavaMessage.setRange(array);
        end
        
        function order = get.Order(obj)
            %get.Order Get the value for property Order
            javaArray = obj.JavaMessage.getOrder;
            array = obj.readJavaArray(javaArray, 'uint32');
            order = uint32(array);
        end
        
        function set.Order(obj, order)
            %set.Order Set the value for property Order
            if ~isvector(order) && isempty(order)
                % Allow empty [] input
                order = uint32.empty(0,1);
            end
            
            validateattributes(order, {'numeric'}, {'vector'}, 'SpatialTemporalTrajectory', 'Order');
            
            javaArray = obj.JavaMessage.getOrder;
            array = obj.writeJavaArray(order, javaArray, 'uint32');
            obj.JavaMessage.setOrder(array);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
            obj.Cache.StartTime = [];
            obj.Cache.FinalTime = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.TrajectoryId = obj.TrajectoryId;
            cpObj.Action = obj.Action;
            cpObj.KMax = obj.KMax;
            cpObj.SStep = obj.SStep;
            cpObj.NumOrder = obj.NumOrder;
            cpObj.NumSegment = obj.NumSegment;
            cpObj.StartYaw = obj.StartYaw;
            cpObj.FinalYaw = obj.FinalYaw;
            cpObj.MagCoeff = obj.MagCoeff;
            cpObj.DebugInfo = obj.DebugInfo;
            cpObj.K = obj.K;
            cpObj.A = obj.A;
            cpObj.B = obj.B;
            cpObj.S = obj.S;
            cpObj.Time = obj.Time;
            cpObj.TimeAcc = obj.TimeAcc;
            cpObj.CoefX = obj.CoefX;
            cpObj.CoefY = obj.CoefY;
            cpObj.CoefZ = obj.CoefZ;
            cpObj.Range = obj.Range;
            cpObj.Order = obj.Order;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
            cpObj.StartTime = copy(obj.StartTime);
            cpObj.FinalTime = copy(obj.FinalTime);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.TrajectoryId = strObj.TrajectoryId;
            obj.Action = strObj.Action;
            obj.KMax = strObj.KMax;
            obj.SStep = strObj.SStep;
            obj.NumOrder = strObj.NumOrder;
            obj.NumSegment = strObj.NumSegment;
            obj.StartYaw = strObj.StartYaw;
            obj.FinalYaw = strObj.FinalYaw;
            obj.MagCoeff = strObj.MagCoeff;
            obj.DebugInfo = strObj.DebugInfo;
            obj.K = strObj.K;
            obj.A = strObj.A;
            obj.B = strObj.B;
            obj.S = strObj.S;
            obj.Time = strObj.Time;
            obj.TimeAcc = strObj.TimeAcc;
            obj.CoefX = strObj.CoefX;
            obj.CoefY = strObj.CoefY;
            obj.CoefZ = strObj.CoefZ;
            obj.Range = strObj.Range;
            obj.Order = strObj.Order;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
            obj.StartTime = feval([obj.TimeClass '.loadobj'], strObj.StartTime);
            obj.FinalTime = feval([obj.TimeClass '.loadobj'], strObj.FinalTime);
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.TrajectoryId = obj.TrajectoryId;
            strObj.Action = obj.Action;
            strObj.KMax = obj.KMax;
            strObj.SStep = obj.SStep;
            strObj.NumOrder = obj.NumOrder;
            strObj.NumSegment = obj.NumSegment;
            strObj.StartYaw = obj.StartYaw;
            strObj.FinalYaw = obj.FinalYaw;
            strObj.MagCoeff = obj.MagCoeff;
            strObj.DebugInfo = obj.DebugInfo;
            strObj.K = obj.K;
            strObj.A = obj.A;
            strObj.B = obj.B;
            strObj.S = obj.S;
            strObj.Time = obj.Time;
            strObj.TimeAcc = obj.TimeAcc;
            strObj.CoefX = obj.CoefX;
            strObj.CoefY = obj.CoefY;
            strObj.CoefZ = obj.CoefZ;
            strObj.Range = obj.Range;
            strObj.Order = obj.Order;
            strObj.Header = saveobj(obj.Header);
            strObj.StartTime = saveobj(obj.StartTime);
            strObj.FinalTime = saveobj(obj.FinalTime);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.quadrotor_msgs.SpatialTemporalTrajectory.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.quadrotor_msgs.SpatialTemporalTrajectory;
            obj.reload(strObj);
        end
    end
end
