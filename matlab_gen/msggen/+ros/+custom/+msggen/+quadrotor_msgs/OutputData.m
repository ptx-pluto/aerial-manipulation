classdef OutputData < ros.Message
    %OutputData MATLAB implementation of quadrotor_msgs/OutputData
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'quadrotor_msgs/OutputData' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '5759ee97fd5c090dcdccf7fc3e50d024' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        GeometryMsgsQuaternionClass = ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Quaternion') % Dispatch to MATLAB class for message type geometry_msgs/Quaternion
        GeometryMsgsVector3Class = ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Vector3') % Dispatch to MATLAB class for message type geometry_msgs/Vector3
        StdMsgsHeaderClass = ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        LoopRate
        Voltage
        Orientation
        AngularVelocity
        LinearAcceleration
        PressureDheight
        PressureHeight
        MagneticField
        Seq
        RadioChannel
    end
    
    properties (Access = protected)
        Cache = struct('Header', [], 'Orientation', [], 'AngularVelocity', [], 'LinearAcceleration', [], 'MagneticField', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'AngularVelocity', 'Header', 'LinearAcceleration', 'LoopRate', 'MagneticField', 'Orientation', 'PressureDheight', 'PressureHeight', 'RadioChannel', 'Seq', 'Voltage'} % List of non-constant message properties
        ROSPropertyList = {'angular_velocity', 'header', 'linear_acceleration', 'loop_rate', 'magnetic_field', 'orientation', 'pressure_dheight', 'pressure_height', 'radio_channel', 'seq', 'voltage'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = OutputData(msg)
            %OutputData Construct the message object OutputData
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'OutputData', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function looprate = get.LoopRate(obj)
            %get.LoopRate Get the value for property LoopRate
            looprate = typecast(int16(obj.JavaMessage.getLoopRate), 'uint16');
        end
        
        function set.LoopRate(obj, looprate)
            %set.LoopRate Set the value for property LoopRate
            validateattributes(looprate, {'numeric'}, {'nonempty', 'scalar'}, 'OutputData', 'LoopRate');
            
            obj.JavaMessage.setLoopRate(looprate);
        end
        
        function voltage = get.Voltage(obj)
            %get.Voltage Get the value for property Voltage
            voltage = double(obj.JavaMessage.getVoltage);
        end
        
        function set.Voltage(obj, voltage)
            %set.Voltage Set the value for property Voltage
            validateattributes(voltage, {'numeric'}, {'nonempty', 'scalar'}, 'OutputData', 'Voltage');
            
            obj.JavaMessage.setVoltage(voltage);
        end
        
        function orientation = get.Orientation(obj)
            %get.Orientation Get the value for property Orientation
            if isempty(obj.Cache.Orientation)
                obj.Cache.Orientation = feval(obj.GeometryMsgsQuaternionClass, obj.JavaMessage.getOrientation);
            end
            orientation = obj.Cache.Orientation;
        end
        
        function set.Orientation(obj, orientation)
            %set.Orientation Set the value for property Orientation
            validateattributes(orientation, {obj.GeometryMsgsQuaternionClass}, {'nonempty', 'scalar'}, 'OutputData', 'Orientation');
            
            obj.JavaMessage.setOrientation(orientation.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Orientation)
                obj.Cache.Orientation.setJavaObject(orientation.getJavaObject);
            end
        end
        
        function angularvelocity = get.AngularVelocity(obj)
            %get.AngularVelocity Get the value for property AngularVelocity
            if isempty(obj.Cache.AngularVelocity)
                obj.Cache.AngularVelocity = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getAngularVelocity);
            end
            angularvelocity = obj.Cache.AngularVelocity;
        end
        
        function set.AngularVelocity(obj, angularvelocity)
            %set.AngularVelocity Set the value for property AngularVelocity
            validateattributes(angularvelocity, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'OutputData', 'AngularVelocity');
            
            obj.JavaMessage.setAngularVelocity(angularvelocity.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.AngularVelocity)
                obj.Cache.AngularVelocity.setJavaObject(angularvelocity.getJavaObject);
            end
        end
        
        function linearacceleration = get.LinearAcceleration(obj)
            %get.LinearAcceleration Get the value for property LinearAcceleration
            if isempty(obj.Cache.LinearAcceleration)
                obj.Cache.LinearAcceleration = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getLinearAcceleration);
            end
            linearacceleration = obj.Cache.LinearAcceleration;
        end
        
        function set.LinearAcceleration(obj, linearacceleration)
            %set.LinearAcceleration Set the value for property LinearAcceleration
            validateattributes(linearacceleration, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'OutputData', 'LinearAcceleration');
            
            obj.JavaMessage.setLinearAcceleration(linearacceleration.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.LinearAcceleration)
                obj.Cache.LinearAcceleration.setJavaObject(linearacceleration.getJavaObject);
            end
        end
        
        function pressuredheight = get.PressureDheight(obj)
            %get.PressureDheight Get the value for property PressureDheight
            pressuredheight = double(obj.JavaMessage.getPressureDheight);
        end
        
        function set.PressureDheight(obj, pressuredheight)
            %set.PressureDheight Set the value for property PressureDheight
            validateattributes(pressuredheight, {'numeric'}, {'nonempty', 'scalar'}, 'OutputData', 'PressureDheight');
            
            obj.JavaMessage.setPressureDheight(pressuredheight);
        end
        
        function pressureheight = get.PressureHeight(obj)
            %get.PressureHeight Get the value for property PressureHeight
            pressureheight = double(obj.JavaMessage.getPressureHeight);
        end
        
        function set.PressureHeight(obj, pressureheight)
            %set.PressureHeight Set the value for property PressureHeight
            validateattributes(pressureheight, {'numeric'}, {'nonempty', 'scalar'}, 'OutputData', 'PressureHeight');
            
            obj.JavaMessage.setPressureHeight(pressureheight);
        end
        
        function magneticfield = get.MagneticField(obj)
            %get.MagneticField Get the value for property MagneticField
            if isempty(obj.Cache.MagneticField)
                obj.Cache.MagneticField = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getMagneticField);
            end
            magneticfield = obj.Cache.MagneticField;
        end
        
        function set.MagneticField(obj, magneticfield)
            %set.MagneticField Set the value for property MagneticField
            validateattributes(magneticfield, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'OutputData', 'MagneticField');
            
            obj.JavaMessage.setMagneticField(magneticfield.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.MagneticField)
                obj.Cache.MagneticField.setJavaObject(magneticfield.getJavaObject);
            end
        end
        
        function seq = get.Seq(obj)
            %get.Seq Get the value for property Seq
            seq = typecast(int8(obj.JavaMessage.getSeq), 'uint8');
        end
        
        function set.Seq(obj, seq)
            %set.Seq Set the value for property Seq
            validateattributes(seq, {'numeric'}, {'nonempty', 'scalar'}, 'OutputData', 'Seq');
            
            obj.JavaMessage.setSeq(seq);
        end
        
        function radiochannel = get.RadioChannel(obj)
            %get.RadioChannel Get the value for property RadioChannel
            javaArray = obj.JavaMessage.getRadioChannel;
            array = obj.readJavaArray(javaArray, 'uint8');
            radiochannel = uint8(array);
        end
        
        function set.RadioChannel(obj, radiochannel)
            %set.RadioChannel Set the value for property RadioChannel
            validateattributes(radiochannel, {'numeric'}, {'vector', 'numel', 8}, 'OutputData', 'RadioChannel');
            
            javaArray = obj.JavaMessage.getRadioChannel;
            array = obj.writeJavaArray(radiochannel, javaArray, 'uint8');
            obj.JavaMessage.setRadioChannel(array);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
            obj.Cache.Orientation = [];
            obj.Cache.AngularVelocity = [];
            obj.Cache.LinearAcceleration = [];
            obj.Cache.MagneticField = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.LoopRate = obj.LoopRate;
            cpObj.Voltage = obj.Voltage;
            cpObj.PressureDheight = obj.PressureDheight;
            cpObj.PressureHeight = obj.PressureHeight;
            cpObj.Seq = obj.Seq;
            cpObj.RadioChannel = obj.RadioChannel;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
            cpObj.Orientation = copy(obj.Orientation);
            cpObj.AngularVelocity = copy(obj.AngularVelocity);
            cpObj.LinearAcceleration = copy(obj.LinearAcceleration);
            cpObj.MagneticField = copy(obj.MagneticField);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.LoopRate = strObj.LoopRate;
            obj.Voltage = strObj.Voltage;
            obj.PressureDheight = strObj.PressureDheight;
            obj.PressureHeight = strObj.PressureHeight;
            obj.Seq = strObj.Seq;
            obj.RadioChannel = strObj.RadioChannel;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
            obj.Orientation = feval([obj.GeometryMsgsQuaternionClass '.loadobj'], strObj.Orientation);
            obj.AngularVelocity = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.AngularVelocity);
            obj.LinearAcceleration = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.LinearAcceleration);
            obj.MagneticField = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.MagneticField);
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.LoopRate = obj.LoopRate;
            strObj.Voltage = obj.Voltage;
            strObj.PressureDheight = obj.PressureDheight;
            strObj.PressureHeight = obj.PressureHeight;
            strObj.Seq = obj.Seq;
            strObj.RadioChannel = obj.RadioChannel;
            strObj.Header = saveobj(obj.Header);
            strObj.Orientation = saveobj(obj.Orientation);
            strObj.AngularVelocity = saveobj(obj.AngularVelocity);
            strObj.LinearAcceleration = saveobj(obj.LinearAcceleration);
            strObj.MagneticField = saveobj(obj.MagneticField);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.quadrotor_msgs.OutputData.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.quadrotor_msgs.OutputData;
            obj.reload(strObj);
        end
    end
end
