classdef PositionCommand_back < ros.Message
    %PositionCommand_back MATLAB implementation of quadrotor_msgs/PositionCommand_back
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'quadrotor_msgs/PositionCommand_back' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '4712f0609ca29a79af79a35ca3e3967a' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant)
        TRAJECTORYSTATUSEMPTY = uint8(0)
        TRAJECTORYSTATUSREADY = uint8(1)
        TRAJECTORYSTATUSCOMPLETED = uint8(3)
        TRAJECTROYSTATUSABORT = uint8(4)
        TRAJECTORYSTATUSILLEGALSTART = uint8(5)
        TRAJECTORYSTATUSILLEGALFINAL = uint8(6)
        TRAJECTORYSTATUSIMPOSSIBLE = uint8(7)
    end
    
    properties (Constant, Access = protected)
        GeometryMsgsPointClass = ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Point') % Dispatch to MATLAB class for message type geometry_msgs/Point
        GeometryMsgsVector3Class = ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Vector3') % Dispatch to MATLAB class for message type geometry_msgs/Vector3
        StdMsgsHeaderClass = ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        Position
        Velocity
        Acceleration
        Yaw
        YawDot
        TrajectoryId
        TrajectoryFlag
        Kx
        Kv
    end
    
    properties (Access = protected)
        Cache = struct('Header', [], 'Position', [], 'Velocity', [], 'Acceleration', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Acceleration', 'Header', 'Kv', 'Kx', 'Position', 'TrajectoryFlag', 'TrajectoryId', 'Velocity', 'Yaw', 'YawDot'} % List of non-constant message properties
        ROSPropertyList = {'acceleration', 'header', 'kv', 'kx', 'position', 'trajectory_flag', 'trajectory_id', 'velocity', 'yaw', 'yaw_dot'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = PositionCommand_back(msg)
            %PositionCommand_back Construct the message object PositionCommand_back
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'PositionCommand_back', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function position = get.Position(obj)
            %get.Position Get the value for property Position
            if isempty(obj.Cache.Position)
                obj.Cache.Position = feval(obj.GeometryMsgsPointClass, obj.JavaMessage.getPosition);
            end
            position = obj.Cache.Position;
        end
        
        function set.Position(obj, position)
            %set.Position Set the value for property Position
            validateattributes(position, {obj.GeometryMsgsPointClass}, {'nonempty', 'scalar'}, 'PositionCommand_back', 'Position');
            
            obj.JavaMessage.setPosition(position.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Position)
                obj.Cache.Position.setJavaObject(position.getJavaObject);
            end
        end
        
        function velocity = get.Velocity(obj)
            %get.Velocity Get the value for property Velocity
            if isempty(obj.Cache.Velocity)
                obj.Cache.Velocity = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getVelocity);
            end
            velocity = obj.Cache.Velocity;
        end
        
        function set.Velocity(obj, velocity)
            %set.Velocity Set the value for property Velocity
            validateattributes(velocity, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'PositionCommand_back', 'Velocity');
            
            obj.JavaMessage.setVelocity(velocity.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Velocity)
                obj.Cache.Velocity.setJavaObject(velocity.getJavaObject);
            end
        end
        
        function acceleration = get.Acceleration(obj)
            %get.Acceleration Get the value for property Acceleration
            if isempty(obj.Cache.Acceleration)
                obj.Cache.Acceleration = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getAcceleration);
            end
            acceleration = obj.Cache.Acceleration;
        end
        
        function set.Acceleration(obj, acceleration)
            %set.Acceleration Set the value for property Acceleration
            validateattributes(acceleration, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'PositionCommand_back', 'Acceleration');
            
            obj.JavaMessage.setAcceleration(acceleration.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Acceleration)
                obj.Cache.Acceleration.setJavaObject(acceleration.getJavaObject);
            end
        end
        
        function yaw = get.Yaw(obj)
            %get.Yaw Get the value for property Yaw
            yaw = double(obj.JavaMessage.getYaw);
        end
        
        function set.Yaw(obj, yaw)
            %set.Yaw Set the value for property Yaw
            validateattributes(yaw, {'numeric'}, {'nonempty', 'scalar'}, 'PositionCommand_back', 'Yaw');
            
            obj.JavaMessage.setYaw(yaw);
        end
        
        function yawdot = get.YawDot(obj)
            %get.YawDot Get the value for property YawDot
            yawdot = double(obj.JavaMessage.getYawDot);
        end
        
        function set.YawDot(obj, yawdot)
            %set.YawDot Set the value for property YawDot
            validateattributes(yawdot, {'numeric'}, {'nonempty', 'scalar'}, 'PositionCommand_back', 'YawDot');
            
            obj.JavaMessage.setYawDot(yawdot);
        end
        
        function trajectoryid = get.TrajectoryId(obj)
            %get.TrajectoryId Get the value for property TrajectoryId
            trajectoryid = typecast(int32(obj.JavaMessage.getTrajectoryId), 'uint32');
        end
        
        function set.TrajectoryId(obj, trajectoryid)
            %set.TrajectoryId Set the value for property TrajectoryId
            validateattributes(trajectoryid, {'numeric'}, {'nonempty', 'scalar'}, 'PositionCommand_back', 'TrajectoryId');
            
            obj.JavaMessage.setTrajectoryId(trajectoryid);
        end
        
        function trajectoryflag = get.TrajectoryFlag(obj)
            %get.TrajectoryFlag Get the value for property TrajectoryFlag
            trajectoryflag = typecast(int8(obj.JavaMessage.getTrajectoryFlag), 'uint8');
        end
        
        function set.TrajectoryFlag(obj, trajectoryflag)
            %set.TrajectoryFlag Set the value for property TrajectoryFlag
            validateattributes(trajectoryflag, {'numeric'}, {'nonempty', 'scalar'}, 'PositionCommand_back', 'TrajectoryFlag');
            
            obj.JavaMessage.setTrajectoryFlag(trajectoryflag);
        end
        
        function kx = get.Kx(obj)
            %get.Kx Get the value for property Kx
            javaArray = obj.JavaMessage.getKx;
            array = obj.readJavaArray(javaArray, 'double');
            kx = double(array);
        end
        
        function set.Kx(obj, kx)
            %set.Kx Set the value for property Kx
            validateattributes(kx, {'numeric'}, {'vector', 'numel', 3}, 'PositionCommand_back', 'Kx');
            
            javaArray = obj.JavaMessage.getKx;
            array = obj.writeJavaArray(kx, javaArray, 'double');
            obj.JavaMessage.setKx(array);
        end
        
        function kv = get.Kv(obj)
            %get.Kv Get the value for property Kv
            javaArray = obj.JavaMessage.getKv;
            array = obj.readJavaArray(javaArray, 'double');
            kv = double(array);
        end
        
        function set.Kv(obj, kv)
            %set.Kv Set the value for property Kv
            validateattributes(kv, {'numeric'}, {'vector', 'numel', 3}, 'PositionCommand_back', 'Kv');
            
            javaArray = obj.JavaMessage.getKv;
            array = obj.writeJavaArray(kv, javaArray, 'double');
            obj.JavaMessage.setKv(array);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
            obj.Cache.Position = [];
            obj.Cache.Velocity = [];
            obj.Cache.Acceleration = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Yaw = obj.Yaw;
            cpObj.YawDot = obj.YawDot;
            cpObj.TrajectoryId = obj.TrajectoryId;
            cpObj.TrajectoryFlag = obj.TrajectoryFlag;
            cpObj.Kx = obj.Kx;
            cpObj.Kv = obj.Kv;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
            cpObj.Position = copy(obj.Position);
            cpObj.Velocity = copy(obj.Velocity);
            cpObj.Acceleration = copy(obj.Acceleration);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Yaw = strObj.Yaw;
            obj.YawDot = strObj.YawDot;
            obj.TrajectoryId = strObj.TrajectoryId;
            obj.TrajectoryFlag = strObj.TrajectoryFlag;
            obj.Kx = strObj.Kx;
            obj.Kv = strObj.Kv;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
            obj.Position = feval([obj.GeometryMsgsPointClass '.loadobj'], strObj.Position);
            obj.Velocity = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.Velocity);
            obj.Acceleration = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.Acceleration);
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Yaw = obj.Yaw;
            strObj.YawDot = obj.YawDot;
            strObj.TrajectoryId = obj.TrajectoryId;
            strObj.TrajectoryFlag = obj.TrajectoryFlag;
            strObj.Kx = obj.Kx;
            strObj.Kv = obj.Kv;
            strObj.Header = saveobj(obj.Header);
            strObj.Position = saveobj(obj.Position);
            strObj.Velocity = saveobj(obj.Velocity);
            strObj.Acceleration = saveobj(obj.Acceleration);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.quadrotor_msgs.PositionCommand_back.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.quadrotor_msgs.PositionCommand_back;
            obj.reload(strObj);
        end
    end
end
