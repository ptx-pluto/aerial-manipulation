classdef Odometry < ros.Message
    %Odometry MATLAB implementation of quadrotor_msgs/Odometry
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'quadrotor_msgs/Odometry' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '94d99f86002b25504a5d3354fa1ad709' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant)
        STATUSODOMVALID = uint8(0)
        STATUSODOMINVALID = uint8(1)
        STATUSODOMLOOPCLOSURE = uint8(2)
    end
    
    properties (Constant, Access = protected)
        NavMsgsOdometryClass = ros.msg.internal.MessageFactory.getClassForType('nav_msgs/Odometry') % Dispatch to MATLAB class for message type nav_msgs/Odometry
    end
    
    properties (Dependent)
        Curodom
        Kfodom
        Kfid
        Status
    end
    
    properties (Access = protected)
        Cache = struct('Curodom', [], 'Kfodom', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Curodom', 'Kfid', 'Kfodom', 'Status'} % List of non-constant message properties
        ROSPropertyList = {'curodom', 'kfid', 'kfodom', 'status'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = Odometry(msg)
            %Odometry Construct the message object Odometry
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function curodom = get.Curodom(obj)
            %get.Curodom Get the value for property Curodom
            if isempty(obj.Cache.Curodom)
                obj.Cache.Curodom = feval(obj.NavMsgsOdometryClass, obj.JavaMessage.getCurodom);
            end
            curodom = obj.Cache.Curodom;
        end
        
        function set.Curodom(obj, curodom)
            %set.Curodom Set the value for property Curodom
            validateattributes(curodom, {obj.NavMsgsOdometryClass}, {'nonempty', 'scalar'}, 'Odometry', 'Curodom');
            
            obj.JavaMessage.setCurodom(curodom.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Curodom)
                obj.Cache.Curodom.setJavaObject(curodom.getJavaObject);
            end
        end
        
        function kfodom = get.Kfodom(obj)
            %get.Kfodom Get the value for property Kfodom
            if isempty(obj.Cache.Kfodom)
                obj.Cache.Kfodom = feval(obj.NavMsgsOdometryClass, obj.JavaMessage.getKfodom);
            end
            kfodom = obj.Cache.Kfodom;
        end
        
        function set.Kfodom(obj, kfodom)
            %set.Kfodom Set the value for property Kfodom
            validateattributes(kfodom, {obj.NavMsgsOdometryClass}, {'nonempty', 'scalar'}, 'Odometry', 'Kfodom');
            
            obj.JavaMessage.setKfodom(kfodom.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Kfodom)
                obj.Cache.Kfodom.setJavaObject(kfodom.getJavaObject);
            end
        end
        
        function kfid = get.Kfid(obj)
            %get.Kfid Get the value for property Kfid
            kfid = typecast(int32(obj.JavaMessage.getKfid), 'uint32');
        end
        
        function set.Kfid(obj, kfid)
            %set.Kfid Set the value for property Kfid
            validateattributes(kfid, {'numeric'}, {'nonempty', 'scalar'}, 'Odometry', 'Kfid');
            
            obj.JavaMessage.setKfid(kfid);
        end
        
        function status = get.Status(obj)
            %get.Status Get the value for property Status
            status = typecast(int8(obj.JavaMessage.getStatus), 'uint8');
        end
        
        function set.Status(obj, status)
            %set.Status Set the value for property Status
            validateattributes(status, {'numeric'}, {'nonempty', 'scalar'}, 'Odometry', 'Status');
            
            obj.JavaMessage.setStatus(status);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Curodom = [];
            obj.Cache.Kfodom = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Kfid = obj.Kfid;
            cpObj.Status = obj.Status;
            
            % Recursively copy compound properties
            cpObj.Curodom = copy(obj.Curodom);
            cpObj.Kfodom = copy(obj.Kfodom);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Kfid = strObj.Kfid;
            obj.Status = strObj.Status;
            obj.Curodom = feval([obj.NavMsgsOdometryClass '.loadobj'], strObj.Curodom);
            obj.Kfodom = feval([obj.NavMsgsOdometryClass '.loadobj'], strObj.Kfodom);
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Kfid = obj.Kfid;
            strObj.Status = obj.Status;
            strObj.Curodom = saveobj(obj.Curodom);
            strObj.Kfodom = saveobj(obj.Kfodom);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.quadrotor_msgs.Odometry.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.quadrotor_msgs.Odometry;
            obj.reload(strObj);
        end
    end
end
