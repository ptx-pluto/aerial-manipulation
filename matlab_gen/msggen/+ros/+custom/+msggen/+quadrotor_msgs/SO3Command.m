classdef SO3Command < ros.Message
    %SO3Command MATLAB implementation of quadrotor_msgs/SO3Command
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'quadrotor_msgs/SO3Command' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'a466650b2633e768513aa3bf62383c86' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        GeometryMsgsQuaternionClass = ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Quaternion') % Dispatch to MATLAB class for message type geometry_msgs/Quaternion
        GeometryMsgsVector3Class = ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Vector3') % Dispatch to MATLAB class for message type geometry_msgs/Vector3
        QuadrotorMsgsAuxCommandClass = ros.msg.internal.MessageFactory.getClassForType('quadrotor_msgs/AuxCommand') % Dispatch to MATLAB class for message type quadrotor_msgs/AuxCommand
        StdMsgsHeaderClass = ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        Force
        Orientation
        Aux
        KR
        KOm
    end
    
    properties (Access = protected)
        Cache = struct('Header', [], 'Force', [], 'Orientation', [], 'Aux', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Aux', 'Force', 'Header', 'KOm', 'KR', 'Orientation'} % List of non-constant message properties
        ROSPropertyList = {'aux', 'force', 'header', 'kOm', 'kR', 'orientation'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = SO3Command(msg)
            %SO3Command Construct the message object SO3Command
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'SO3Command', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function force = get.Force(obj)
            %get.Force Get the value for property Force
            if isempty(obj.Cache.Force)
                obj.Cache.Force = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getForce);
            end
            force = obj.Cache.Force;
        end
        
        function set.Force(obj, force)
            %set.Force Set the value for property Force
            validateattributes(force, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'SO3Command', 'Force');
            
            obj.JavaMessage.setForce(force.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Force)
                obj.Cache.Force.setJavaObject(force.getJavaObject);
            end
        end
        
        function orientation = get.Orientation(obj)
            %get.Orientation Get the value for property Orientation
            if isempty(obj.Cache.Orientation)
                obj.Cache.Orientation = feval(obj.GeometryMsgsQuaternionClass, obj.JavaMessage.getOrientation);
            end
            orientation = obj.Cache.Orientation;
        end
        
        function set.Orientation(obj, orientation)
            %set.Orientation Set the value for property Orientation
            validateattributes(orientation, {obj.GeometryMsgsQuaternionClass}, {'nonempty', 'scalar'}, 'SO3Command', 'Orientation');
            
            obj.JavaMessage.setOrientation(orientation.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Orientation)
                obj.Cache.Orientation.setJavaObject(orientation.getJavaObject);
            end
        end
        
        function aux = get.Aux(obj)
            %get.Aux Get the value for property Aux
            if isempty(obj.Cache.Aux)
                obj.Cache.Aux = feval(obj.QuadrotorMsgsAuxCommandClass, obj.JavaMessage.getAux);
            end
            aux = obj.Cache.Aux;
        end
        
        function set.Aux(obj, aux)
            %set.Aux Set the value for property Aux
            validateattributes(aux, {obj.QuadrotorMsgsAuxCommandClass}, {'nonempty', 'scalar'}, 'SO3Command', 'Aux');
            
            obj.JavaMessage.setAux(aux.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Aux)
                obj.Cache.Aux.setJavaObject(aux.getJavaObject);
            end
        end
        
        function kr = get.KR(obj)
            %get.KR Get the value for property KR
            javaArray = obj.JavaMessage.getKR;
            array = obj.readJavaArray(javaArray, 'double');
            kr = double(array);
        end
        
        function set.KR(obj, kr)
            %set.KR Set the value for property KR
            validateattributes(kr, {'numeric'}, {'vector', 'numel', 3}, 'SO3Command', 'KR');
            
            javaArray = obj.JavaMessage.getKR;
            array = obj.writeJavaArray(kr, javaArray, 'double');
            obj.JavaMessage.setKR(array);
        end
        
        function kom = get.KOm(obj)
            %get.KOm Get the value for property KOm
            javaArray = obj.JavaMessage.getKOm;
            array = obj.readJavaArray(javaArray, 'double');
            kom = double(array);
        end
        
        function set.KOm(obj, kom)
            %set.KOm Set the value for property KOm
            validateattributes(kom, {'numeric'}, {'vector', 'numel', 3}, 'SO3Command', 'KOm');
            
            javaArray = obj.JavaMessage.getKOm;
            array = obj.writeJavaArray(kom, javaArray, 'double');
            obj.JavaMessage.setKOm(array);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
            obj.Cache.Force = [];
            obj.Cache.Orientation = [];
            obj.Cache.Aux = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.KR = obj.KR;
            cpObj.KOm = obj.KOm;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
            cpObj.Force = copy(obj.Force);
            cpObj.Orientation = copy(obj.Orientation);
            cpObj.Aux = copy(obj.Aux);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.KR = strObj.KR;
            obj.KOm = strObj.KOm;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
            obj.Force = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.Force);
            obj.Orientation = feval([obj.GeometryMsgsQuaternionClass '.loadobj'], strObj.Orientation);
            obj.Aux = feval([obj.QuadrotorMsgsAuxCommandClass '.loadobj'], strObj.Aux);
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.KR = obj.KR;
            strObj.KOm = obj.KOm;
            strObj.Header = saveobj(obj.Header);
            strObj.Force = saveobj(obj.Force);
            strObj.Orientation = saveobj(obj.Orientation);
            strObj.Aux = saveobj(obj.Aux);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.quadrotor_msgs.SO3Command.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.quadrotor_msgs.SO3Command;
            obj.reload(strObj);
        end
    end
end
