classdef ReplanCheck < ros.Message
    %ReplanCheck MATLAB implementation of quadrotor_msgs/ReplanCheck
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'quadrotor_msgs/ReplanCheck' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '6a31f08865d3c08f64743e11538e9c4b' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        GeometryMsgsPointClass = ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Point') % Dispatch to MATLAB class for message type geometry_msgs/Point
        GeometryMsgsVector3Class = ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Vector3') % Dispatch to MATLAB class for message type geometry_msgs/Vector3
        StdMsgsHeaderClass = ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        StartVelocity
        StartAcceleration
        StopVelocity
        StopAcceleration
        ReplanTimeLength
        CheckPointsTimeInterval
        PlanPointsTimeInterval
        TrajectoryId
        ReplanToGlobalTime
        PlanPoints
        CheckPoints
    end
    
    properties (Access = protected)
        Cache = struct('Header', [], 'StartVelocity', [], 'StartAcceleration', [], 'PlanPoints', [], 'CheckPoints', [], 'StopVelocity', [], 'StopAcceleration', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'CheckPoints', 'CheckPointsTimeInterval', 'Header', 'PlanPoints', 'PlanPointsTimeInterval', 'ReplanTimeLength', 'ReplanToGlobalTime', 'StartAcceleration', 'StartVelocity', 'StopAcceleration', 'StopVelocity', 'TrajectoryId'} % List of non-constant message properties
        ROSPropertyList = {'check_points', 'check_points_time_interval', 'header', 'plan_points', 'plan_points_time_interval', 'replan_time_length', 'replan_to_global_time', 'start_acceleration', 'start_velocity', 'stop_acceleration', 'stop_velocity', 'trajectory_id'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = ReplanCheck(msg)
            %ReplanCheck Construct the message object ReplanCheck
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'ReplanCheck', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function startvelocity = get.StartVelocity(obj)
            %get.StartVelocity Get the value for property StartVelocity
            if isempty(obj.Cache.StartVelocity)
                obj.Cache.StartVelocity = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getStartVelocity);
            end
            startvelocity = obj.Cache.StartVelocity;
        end
        
        function set.StartVelocity(obj, startvelocity)
            %set.StartVelocity Set the value for property StartVelocity
            validateattributes(startvelocity, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'ReplanCheck', 'StartVelocity');
            
            obj.JavaMessage.setStartVelocity(startvelocity.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.StartVelocity)
                obj.Cache.StartVelocity.setJavaObject(startvelocity.getJavaObject);
            end
        end
        
        function startacceleration = get.StartAcceleration(obj)
            %get.StartAcceleration Get the value for property StartAcceleration
            if isempty(obj.Cache.StartAcceleration)
                obj.Cache.StartAcceleration = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getStartAcceleration);
            end
            startacceleration = obj.Cache.StartAcceleration;
        end
        
        function set.StartAcceleration(obj, startacceleration)
            %set.StartAcceleration Set the value for property StartAcceleration
            validateattributes(startacceleration, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'ReplanCheck', 'StartAcceleration');
            
            obj.JavaMessage.setStartAcceleration(startacceleration.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.StartAcceleration)
                obj.Cache.StartAcceleration.setJavaObject(startacceleration.getJavaObject);
            end
        end
        
        function stopvelocity = get.StopVelocity(obj)
            %get.StopVelocity Get the value for property StopVelocity
            if isempty(obj.Cache.StopVelocity)
                obj.Cache.StopVelocity = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getStopVelocity);
            end
            stopvelocity = obj.Cache.StopVelocity;
        end
        
        function set.StopVelocity(obj, stopvelocity)
            %set.StopVelocity Set the value for property StopVelocity
            validateattributes(stopvelocity, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'ReplanCheck', 'StopVelocity');
            
            obj.JavaMessage.setStopVelocity(stopvelocity.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.StopVelocity)
                obj.Cache.StopVelocity.setJavaObject(stopvelocity.getJavaObject);
            end
        end
        
        function stopacceleration = get.StopAcceleration(obj)
            %get.StopAcceleration Get the value for property StopAcceleration
            if isempty(obj.Cache.StopAcceleration)
                obj.Cache.StopAcceleration = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getStopAcceleration);
            end
            stopacceleration = obj.Cache.StopAcceleration;
        end
        
        function set.StopAcceleration(obj, stopacceleration)
            %set.StopAcceleration Set the value for property StopAcceleration
            validateattributes(stopacceleration, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'ReplanCheck', 'StopAcceleration');
            
            obj.JavaMessage.setStopAcceleration(stopacceleration.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.StopAcceleration)
                obj.Cache.StopAcceleration.setJavaObject(stopacceleration.getJavaObject);
            end
        end
        
        function replantimelength = get.ReplanTimeLength(obj)
            %get.ReplanTimeLength Get the value for property ReplanTimeLength
            replantimelength = double(obj.JavaMessage.getReplanTimeLength);
        end
        
        function set.ReplanTimeLength(obj, replantimelength)
            %set.ReplanTimeLength Set the value for property ReplanTimeLength
            validateattributes(replantimelength, {'numeric'}, {'nonempty', 'scalar'}, 'ReplanCheck', 'ReplanTimeLength');
            
            obj.JavaMessage.setReplanTimeLength(replantimelength);
        end
        
        function checkpointstimeinterval = get.CheckPointsTimeInterval(obj)
            %get.CheckPointsTimeInterval Get the value for property CheckPointsTimeInterval
            checkpointstimeinterval = double(obj.JavaMessage.getCheckPointsTimeInterval);
        end
        
        function set.CheckPointsTimeInterval(obj, checkpointstimeinterval)
            %set.CheckPointsTimeInterval Set the value for property CheckPointsTimeInterval
            validateattributes(checkpointstimeinterval, {'numeric'}, {'nonempty', 'scalar'}, 'ReplanCheck', 'CheckPointsTimeInterval');
            
            obj.JavaMessage.setCheckPointsTimeInterval(checkpointstimeinterval);
        end
        
        function planpointstimeinterval = get.PlanPointsTimeInterval(obj)
            %get.PlanPointsTimeInterval Get the value for property PlanPointsTimeInterval
            planpointstimeinterval = double(obj.JavaMessage.getPlanPointsTimeInterval);
        end
        
        function set.PlanPointsTimeInterval(obj, planpointstimeinterval)
            %set.PlanPointsTimeInterval Set the value for property PlanPointsTimeInterval
            validateattributes(planpointstimeinterval, {'numeric'}, {'nonempty', 'scalar'}, 'ReplanCheck', 'PlanPointsTimeInterval');
            
            obj.JavaMessage.setPlanPointsTimeInterval(planpointstimeinterval);
        end
        
        function trajectoryid = get.TrajectoryId(obj)
            %get.TrajectoryId Get the value for property TrajectoryId
            trajectoryid = typecast(int32(obj.JavaMessage.getTrajectoryId), 'uint32');
        end
        
        function set.TrajectoryId(obj, trajectoryid)
            %set.TrajectoryId Set the value for property TrajectoryId
            validateattributes(trajectoryid, {'numeric'}, {'nonempty', 'scalar'}, 'ReplanCheck', 'TrajectoryId');
            
            obj.JavaMessage.setTrajectoryId(trajectoryid);
        end
        
        function replantoglobaltime = get.ReplanToGlobalTime(obj)
            %get.ReplanToGlobalTime Get the value for property ReplanToGlobalTime
            replantoglobaltime = double(obj.JavaMessage.getReplanToGlobalTime);
        end
        
        function set.ReplanToGlobalTime(obj, replantoglobaltime)
            %set.ReplanToGlobalTime Set the value for property ReplanToGlobalTime
            validateattributes(replantoglobaltime, {'numeric'}, {'nonempty', 'scalar'}, 'ReplanCheck', 'ReplanToGlobalTime');
            
            obj.JavaMessage.setReplanToGlobalTime(replantoglobaltime);
        end
        
        function planpoints = get.PlanPoints(obj)
            %get.PlanPoints Get the value for property PlanPoints
            if isempty(obj.Cache.PlanPoints)
                javaArray = obj.JavaMessage.getPlanPoints;
                array = obj.readJavaArray(javaArray, obj.GeometryMsgsPointClass);
                obj.Cache.PlanPoints = feval(obj.GeometryMsgsPointClass, array);
            end
            planpoints = obj.Cache.PlanPoints;
        end
        
        function set.PlanPoints(obj, planpoints)
            %set.PlanPoints Set the value for property PlanPoints
            if ~isvector(planpoints) && isempty(planpoints)
                % Allow empty [] input
                planpoints = feval([obj.GeometryMsgsPointClass '.empty'], 0, 1);
            end
            
            validateattributes(planpoints, {obj.GeometryMsgsPointClass}, {'vector'}, 'ReplanCheck', 'PlanPoints');
            
            javaArray = obj.JavaMessage.getPlanPoints;
            array = obj.writeJavaArray(planpoints, javaArray, obj.GeometryMsgsPointClass);
            obj.JavaMessage.setPlanPoints(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.PlanPoints)
                obj.Cache.PlanPoints = [];
                obj.Cache.PlanPoints = obj.PlanPoints;
            end
        end
        
        function checkpoints = get.CheckPoints(obj)
            %get.CheckPoints Get the value for property CheckPoints
            if isempty(obj.Cache.CheckPoints)
                javaArray = obj.JavaMessage.getCheckPoints;
                array = obj.readJavaArray(javaArray, obj.GeometryMsgsPointClass);
                obj.Cache.CheckPoints = feval(obj.GeometryMsgsPointClass, array);
            end
            checkpoints = obj.Cache.CheckPoints;
        end
        
        function set.CheckPoints(obj, checkpoints)
            %set.CheckPoints Set the value for property CheckPoints
            if ~isvector(checkpoints) && isempty(checkpoints)
                % Allow empty [] input
                checkpoints = feval([obj.GeometryMsgsPointClass '.empty'], 0, 1);
            end
            
            validateattributes(checkpoints, {obj.GeometryMsgsPointClass}, {'vector'}, 'ReplanCheck', 'CheckPoints');
            
            javaArray = obj.JavaMessage.getCheckPoints;
            array = obj.writeJavaArray(checkpoints, javaArray, obj.GeometryMsgsPointClass);
            obj.JavaMessage.setCheckPoints(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.CheckPoints)
                obj.Cache.CheckPoints = [];
                obj.Cache.CheckPoints = obj.CheckPoints;
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
            obj.Cache.StartVelocity = [];
            obj.Cache.StartAcceleration = [];
            obj.Cache.PlanPoints = [];
            obj.Cache.CheckPoints = [];
            obj.Cache.StopVelocity = [];
            obj.Cache.StopAcceleration = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.ReplanTimeLength = obj.ReplanTimeLength;
            cpObj.CheckPointsTimeInterval = obj.CheckPointsTimeInterval;
            cpObj.PlanPointsTimeInterval = obj.PlanPointsTimeInterval;
            cpObj.TrajectoryId = obj.TrajectoryId;
            cpObj.ReplanToGlobalTime = obj.ReplanToGlobalTime;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
            cpObj.StartVelocity = copy(obj.StartVelocity);
            cpObj.StartAcceleration = copy(obj.StartAcceleration);
            cpObj.StopVelocity = copy(obj.StopVelocity);
            cpObj.StopAcceleration = copy(obj.StopAcceleration);
            cpObj.PlanPoints = copy(obj.PlanPoints);
            cpObj.CheckPoints = copy(obj.CheckPoints);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.ReplanTimeLength = strObj.ReplanTimeLength;
            obj.CheckPointsTimeInterval = strObj.CheckPointsTimeInterval;
            obj.PlanPointsTimeInterval = strObj.PlanPointsTimeInterval;
            obj.TrajectoryId = strObj.TrajectoryId;
            obj.ReplanToGlobalTime = strObj.ReplanToGlobalTime;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
            obj.StartVelocity = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.StartVelocity);
            obj.StartAcceleration = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.StartAcceleration);
            obj.StopVelocity = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.StopVelocity);
            obj.StopAcceleration = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.StopAcceleration);
            PlanPointsCell = arrayfun(@(x) feval([obj.GeometryMsgsPointClass '.loadobj'], x), strObj.PlanPoints, 'UniformOutput', false);
            obj.PlanPoints = vertcat(PlanPointsCell{:});
            CheckPointsCell = arrayfun(@(x) feval([obj.GeometryMsgsPointClass '.loadobj'], x), strObj.CheckPoints, 'UniformOutput', false);
            obj.CheckPoints = vertcat(CheckPointsCell{:});
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.ReplanTimeLength = obj.ReplanTimeLength;
            strObj.CheckPointsTimeInterval = obj.CheckPointsTimeInterval;
            strObj.PlanPointsTimeInterval = obj.PlanPointsTimeInterval;
            strObj.TrajectoryId = obj.TrajectoryId;
            strObj.ReplanToGlobalTime = obj.ReplanToGlobalTime;
            strObj.Header = saveobj(obj.Header);
            strObj.StartVelocity = saveobj(obj.StartVelocity);
            strObj.StartAcceleration = saveobj(obj.StartAcceleration);
            strObj.StopVelocity = saveobj(obj.StopVelocity);
            strObj.StopAcceleration = saveobj(obj.StopAcceleration);
            strObj.PlanPoints = arrayfun(@(x) saveobj(x), obj.PlanPoints);
            strObj.CheckPoints = arrayfun(@(x) saveobj(x), obj.CheckPoints);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.quadrotor_msgs.ReplanCheck.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.quadrotor_msgs.ReplanCheck;
            obj.reload(strObj);
        end
    end
end
