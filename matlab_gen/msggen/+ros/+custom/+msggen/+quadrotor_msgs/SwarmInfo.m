classdef SwarmInfo < ros.Message
    %SwarmInfo MATLAB implementation of quadrotor_msgs/SwarmInfo
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'quadrotor_msgs/SwarmInfo' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '908ae631e70132160c2527a9926df867' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        QuadrotorMsgsTrajectoryMatrixClass = ros.msg.internal.MessageFactory.getClassForType('quadrotor_msgs/TrajectoryMatrix') % Dispatch to MATLAB class for message type quadrotor_msgs/TrajectoryMatrix
        TimeClass = ros.msg.internal.MessageFactory.getClassForType('time') % Dispatch to MATLAB class for message type time
    end
    
    properties (Dependent)
        Path
        Start
    end
    
    properties (Access = protected)
        Cache = struct('Path', [], 'Start', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Path', 'Start'} % List of non-constant message properties
        ROSPropertyList = {'path', 'start'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = SwarmInfo(msg)
            %SwarmInfo Construct the message object SwarmInfo
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function path = get.Path(obj)
            %get.Path Get the value for property Path
            if isempty(obj.Cache.Path)
                obj.Cache.Path = feval(obj.QuadrotorMsgsTrajectoryMatrixClass, obj.JavaMessage.getPath);
            end
            path = obj.Cache.Path;
        end
        
        function set.Path(obj, path)
            %set.Path Set the value for property Path
            validateattributes(path, {obj.QuadrotorMsgsTrajectoryMatrixClass}, {'nonempty', 'scalar'}, 'SwarmInfo', 'Path');
            
            obj.JavaMessage.setPath(path.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Path)
                obj.Cache.Path.setJavaObject(path.getJavaObject);
            end
        end
        
        function start = get.Start(obj)
            %get.Start Get the value for property Start
            if isempty(obj.Cache.Start)
                obj.Cache.Start = feval(obj.TimeClass, obj.JavaMessage.getStart);
            end
            start = obj.Cache.Start;
        end
        
        function set.Start(obj, start)
            %set.Start Set the value for property Start
            validateattributes(start, {obj.TimeClass}, {'nonempty', 'scalar'}, 'SwarmInfo', 'Start');
            
            obj.JavaMessage.setStart(start.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Start)
                obj.Cache.Start.setJavaObject(start.getJavaObject);
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Path = [];
            obj.Cache.Start = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Recursively copy compound properties
            cpObj.Path = copy(obj.Path);
            cpObj.Start = copy(obj.Start);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Path = feval([obj.QuadrotorMsgsTrajectoryMatrixClass '.loadobj'], strObj.Path);
            obj.Start = feval([obj.TimeClass '.loadobj'], strObj.Start);
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Path = saveobj(obj.Path);
            strObj.Start = saveobj(obj.Start);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.quadrotor_msgs.SwarmInfo.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.quadrotor_msgs.SwarmInfo;
            obj.reload(strObj);
        end
    end
end
