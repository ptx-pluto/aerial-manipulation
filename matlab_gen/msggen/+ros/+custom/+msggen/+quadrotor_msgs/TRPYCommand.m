classdef TRPYCommand < ros.Message
    %TRPYCommand MATLAB implementation of quadrotor_msgs/TRPYCommand
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'quadrotor_msgs/TRPYCommand' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '6779ee8a86cc757aeea21725df32d00c' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        QuadrotorMsgsAuxCommandClass = ros.msg.internal.MessageFactory.getClassForType('quadrotor_msgs/AuxCommand') % Dispatch to MATLAB class for message type quadrotor_msgs/AuxCommand
        StdMsgsHeaderClass = ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        Thrust
        Roll
        Pitch
        Yaw
        Aux
    end
    
    properties (Access = protected)
        Cache = struct('Header', [], 'Aux', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Aux', 'Header', 'Pitch', 'Roll', 'Thrust', 'Yaw'} % List of non-constant message properties
        ROSPropertyList = {'aux', 'header', 'pitch', 'roll', 'thrust', 'yaw'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = TRPYCommand(msg)
            %TRPYCommand Construct the message object TRPYCommand
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'TRPYCommand', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function thrust = get.Thrust(obj)
            %get.Thrust Get the value for property Thrust
            thrust = single(obj.JavaMessage.getThrust);
        end
        
        function set.Thrust(obj, thrust)
            %set.Thrust Set the value for property Thrust
            validateattributes(thrust, {'numeric'}, {'nonempty', 'scalar'}, 'TRPYCommand', 'Thrust');
            
            obj.JavaMessage.setThrust(thrust);
        end
        
        function roll = get.Roll(obj)
            %get.Roll Get the value for property Roll
            roll = single(obj.JavaMessage.getRoll);
        end
        
        function set.Roll(obj, roll)
            %set.Roll Set the value for property Roll
            validateattributes(roll, {'numeric'}, {'nonempty', 'scalar'}, 'TRPYCommand', 'Roll');
            
            obj.JavaMessage.setRoll(roll);
        end
        
        function pitch = get.Pitch(obj)
            %get.Pitch Get the value for property Pitch
            pitch = single(obj.JavaMessage.getPitch);
        end
        
        function set.Pitch(obj, pitch)
            %set.Pitch Set the value for property Pitch
            validateattributes(pitch, {'numeric'}, {'nonempty', 'scalar'}, 'TRPYCommand', 'Pitch');
            
            obj.JavaMessage.setPitch(pitch);
        end
        
        function yaw = get.Yaw(obj)
            %get.Yaw Get the value for property Yaw
            yaw = single(obj.JavaMessage.getYaw);
        end
        
        function set.Yaw(obj, yaw)
            %set.Yaw Set the value for property Yaw
            validateattributes(yaw, {'numeric'}, {'nonempty', 'scalar'}, 'TRPYCommand', 'Yaw');
            
            obj.JavaMessage.setYaw(yaw);
        end
        
        function aux = get.Aux(obj)
            %get.Aux Get the value for property Aux
            if isempty(obj.Cache.Aux)
                obj.Cache.Aux = feval(obj.QuadrotorMsgsAuxCommandClass, obj.JavaMessage.getAux);
            end
            aux = obj.Cache.Aux;
        end
        
        function set.Aux(obj, aux)
            %set.Aux Set the value for property Aux
            validateattributes(aux, {obj.QuadrotorMsgsAuxCommandClass}, {'nonempty', 'scalar'}, 'TRPYCommand', 'Aux');
            
            obj.JavaMessage.setAux(aux.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Aux)
                obj.Cache.Aux.setJavaObject(aux.getJavaObject);
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
            obj.Cache.Aux = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Thrust = obj.Thrust;
            cpObj.Roll = obj.Roll;
            cpObj.Pitch = obj.Pitch;
            cpObj.Yaw = obj.Yaw;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
            cpObj.Aux = copy(obj.Aux);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Thrust = strObj.Thrust;
            obj.Roll = strObj.Roll;
            obj.Pitch = strObj.Pitch;
            obj.Yaw = strObj.Yaw;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
            obj.Aux = feval([obj.QuadrotorMsgsAuxCommandClass '.loadobj'], strObj.Aux);
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Thrust = obj.Thrust;
            strObj.Roll = obj.Roll;
            strObj.Pitch = obj.Pitch;
            strObj.Yaw = obj.Yaw;
            strObj.Header = saveobj(obj.Header);
            strObj.Aux = saveobj(obj.Aux);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.quadrotor_msgs.TRPYCommand.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.quadrotor_msgs.TRPYCommand;
            obj.reload(strObj);
        end
    end
end
