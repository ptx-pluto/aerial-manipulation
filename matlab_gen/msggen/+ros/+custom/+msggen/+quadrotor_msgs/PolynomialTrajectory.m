classdef PolynomialTrajectory < ros.Message
    %PolynomialTrajectory MATLAB implementation of quadrotor_msgs/PolynomialTrajectory
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'quadrotor_msgs/PolynomialTrajectory' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '3abb6e1147f95babc52b64612c5ba5ed' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant)
        ACTIONADD = uint32(1)
        ACTIONABORT = uint32(2)
        ACTIONWARNSTART = uint32(3)
        ACTIONWARNFINAL = uint32(4)
        ACTIONWARNIMPOSSIBLE = uint32(5)
    end
    
    properties (Constant, Access = protected)
        StdMsgsHeaderClass = ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        TrajectoryId
        Action
        NumOrder
        NumSegment
        StartYaw
        FinalYaw
        MagCoeff
        DebugInfo
        CoefX
        CoefY
        CoefZ
        Time
        Order
    end
    
    properties (Access = protected)
        Cache = struct('Header', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Action', 'CoefX', 'CoefY', 'CoefZ', 'DebugInfo', 'FinalYaw', 'Header', 'MagCoeff', 'NumOrder', 'NumSegment', 'Order', 'StartYaw', 'Time', 'TrajectoryId'} % List of non-constant message properties
        ROSPropertyList = {'action', 'coef_x', 'coef_y', 'coef_z', 'debug_info', 'final_yaw', 'header', 'mag_coeff', 'num_order', 'num_segment', 'order', 'start_yaw', 'time', 'trajectory_id'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = PolynomialTrajectory(msg)
            %PolynomialTrajectory Construct the message object PolynomialTrajectory
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'PolynomialTrajectory', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function trajectoryid = get.TrajectoryId(obj)
            %get.TrajectoryId Get the value for property TrajectoryId
            trajectoryid = typecast(int32(obj.JavaMessage.getTrajectoryId), 'uint32');
        end
        
        function set.TrajectoryId(obj, trajectoryid)
            %set.TrajectoryId Set the value for property TrajectoryId
            validateattributes(trajectoryid, {'numeric'}, {'nonempty', 'scalar'}, 'PolynomialTrajectory', 'TrajectoryId');
            
            obj.JavaMessage.setTrajectoryId(trajectoryid);
        end
        
        function action = get.Action(obj)
            %get.Action Get the value for property Action
            action = typecast(int32(obj.JavaMessage.getAction), 'uint32');
        end
        
        function set.Action(obj, action)
            %set.Action Set the value for property Action
            validateattributes(action, {'numeric'}, {'nonempty', 'scalar'}, 'PolynomialTrajectory', 'Action');
            
            obj.JavaMessage.setAction(action);
        end
        
        function numorder = get.NumOrder(obj)
            %get.NumOrder Get the value for property NumOrder
            numorder = typecast(int32(obj.JavaMessage.getNumOrder), 'uint32');
        end
        
        function set.NumOrder(obj, numorder)
            %set.NumOrder Set the value for property NumOrder
            validateattributes(numorder, {'numeric'}, {'nonempty', 'scalar'}, 'PolynomialTrajectory', 'NumOrder');
            
            obj.JavaMessage.setNumOrder(numorder);
        end
        
        function numsegment = get.NumSegment(obj)
            %get.NumSegment Get the value for property NumSegment
            numsegment = typecast(int32(obj.JavaMessage.getNumSegment), 'uint32');
        end
        
        function set.NumSegment(obj, numsegment)
            %set.NumSegment Set the value for property NumSegment
            validateattributes(numsegment, {'numeric'}, {'nonempty', 'scalar'}, 'PolynomialTrajectory', 'NumSegment');
            
            obj.JavaMessage.setNumSegment(numsegment);
        end
        
        function startyaw = get.StartYaw(obj)
            %get.StartYaw Get the value for property StartYaw
            startyaw = double(obj.JavaMessage.getStartYaw);
        end
        
        function set.StartYaw(obj, startyaw)
            %set.StartYaw Set the value for property StartYaw
            validateattributes(startyaw, {'numeric'}, {'nonempty', 'scalar'}, 'PolynomialTrajectory', 'StartYaw');
            
            obj.JavaMessage.setStartYaw(startyaw);
        end
        
        function finalyaw = get.FinalYaw(obj)
            %get.FinalYaw Get the value for property FinalYaw
            finalyaw = double(obj.JavaMessage.getFinalYaw);
        end
        
        function set.FinalYaw(obj, finalyaw)
            %set.FinalYaw Set the value for property FinalYaw
            validateattributes(finalyaw, {'numeric'}, {'nonempty', 'scalar'}, 'PolynomialTrajectory', 'FinalYaw');
            
            obj.JavaMessage.setFinalYaw(finalyaw);
        end
        
        function magcoeff = get.MagCoeff(obj)
            %get.MagCoeff Get the value for property MagCoeff
            magcoeff = double(obj.JavaMessage.getMagCoeff);
        end
        
        function set.MagCoeff(obj, magcoeff)
            %set.MagCoeff Set the value for property MagCoeff
            validateattributes(magcoeff, {'numeric'}, {'nonempty', 'scalar'}, 'PolynomialTrajectory', 'MagCoeff');
            
            obj.JavaMessage.setMagCoeff(magcoeff);
        end
        
        function debuginfo = get.DebugInfo(obj)
            %get.DebugInfo Get the value for property DebugInfo
            debuginfo = char(obj.JavaMessage.getDebugInfo);
        end
        
        function set.DebugInfo(obj, debuginfo)
            %set.DebugInfo Set the value for property DebugInfo
            debuginfo = convertStringsToChars(debuginfo);
            
            validateattributes(debuginfo, {'char', 'string'}, {}, 'PolynomialTrajectory', 'DebugInfo');
            
            obj.JavaMessage.setDebugInfo(debuginfo);
        end
        
        function coefx = get.CoefX(obj)
            %get.CoefX Get the value for property CoefX
            javaArray = obj.JavaMessage.getCoefX;
            array = obj.readJavaArray(javaArray, 'double');
            coefx = double(array);
        end
        
        function set.CoefX(obj, coefx)
            %set.CoefX Set the value for property CoefX
            if ~isvector(coefx) && isempty(coefx)
                % Allow empty [] input
                coefx = double.empty(0,1);
            end
            
            validateattributes(coefx, {'numeric'}, {'vector'}, 'PolynomialTrajectory', 'CoefX');
            
            javaArray = obj.JavaMessage.getCoefX;
            array = obj.writeJavaArray(coefx, javaArray, 'double');
            obj.JavaMessage.setCoefX(array);
        end
        
        function coefy = get.CoefY(obj)
            %get.CoefY Get the value for property CoefY
            javaArray = obj.JavaMessage.getCoefY;
            array = obj.readJavaArray(javaArray, 'double');
            coefy = double(array);
        end
        
        function set.CoefY(obj, coefy)
            %set.CoefY Set the value for property CoefY
            if ~isvector(coefy) && isempty(coefy)
                % Allow empty [] input
                coefy = double.empty(0,1);
            end
            
            validateattributes(coefy, {'numeric'}, {'vector'}, 'PolynomialTrajectory', 'CoefY');
            
            javaArray = obj.JavaMessage.getCoefY;
            array = obj.writeJavaArray(coefy, javaArray, 'double');
            obj.JavaMessage.setCoefY(array);
        end
        
        function coefz = get.CoefZ(obj)
            %get.CoefZ Get the value for property CoefZ
            javaArray = obj.JavaMessage.getCoefZ;
            array = obj.readJavaArray(javaArray, 'double');
            coefz = double(array);
        end
        
        function set.CoefZ(obj, coefz)
            %set.CoefZ Set the value for property CoefZ
            if ~isvector(coefz) && isempty(coefz)
                % Allow empty [] input
                coefz = double.empty(0,1);
            end
            
            validateattributes(coefz, {'numeric'}, {'vector'}, 'PolynomialTrajectory', 'CoefZ');
            
            javaArray = obj.JavaMessage.getCoefZ;
            array = obj.writeJavaArray(coefz, javaArray, 'double');
            obj.JavaMessage.setCoefZ(array);
        end
        
        function time = get.Time(obj)
            %get.Time Get the value for property Time
            javaArray = obj.JavaMessage.getTime;
            array = obj.readJavaArray(javaArray, 'double');
            time = double(array);
        end
        
        function set.Time(obj, time)
            %set.Time Set the value for property Time
            if ~isvector(time) && isempty(time)
                % Allow empty [] input
                time = double.empty(0,1);
            end
            
            validateattributes(time, {'numeric'}, {'vector'}, 'PolynomialTrajectory', 'Time');
            
            javaArray = obj.JavaMessage.getTime;
            array = obj.writeJavaArray(time, javaArray, 'double');
            obj.JavaMessage.setTime(array);
        end
        
        function order = get.Order(obj)
            %get.Order Get the value for property Order
            javaArray = obj.JavaMessage.getOrder;
            array = obj.readJavaArray(javaArray, 'uint32');
            order = uint32(array);
        end
        
        function set.Order(obj, order)
            %set.Order Set the value for property Order
            if ~isvector(order) && isempty(order)
                % Allow empty [] input
                order = uint32.empty(0,1);
            end
            
            validateattributes(order, {'numeric'}, {'vector'}, 'PolynomialTrajectory', 'Order');
            
            javaArray = obj.JavaMessage.getOrder;
            array = obj.writeJavaArray(order, javaArray, 'uint32');
            obj.JavaMessage.setOrder(array);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.TrajectoryId = obj.TrajectoryId;
            cpObj.Action = obj.Action;
            cpObj.NumOrder = obj.NumOrder;
            cpObj.NumSegment = obj.NumSegment;
            cpObj.StartYaw = obj.StartYaw;
            cpObj.FinalYaw = obj.FinalYaw;
            cpObj.MagCoeff = obj.MagCoeff;
            cpObj.DebugInfo = obj.DebugInfo;
            cpObj.CoefX = obj.CoefX;
            cpObj.CoefY = obj.CoefY;
            cpObj.CoefZ = obj.CoefZ;
            cpObj.Time = obj.Time;
            cpObj.Order = obj.Order;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.TrajectoryId = strObj.TrajectoryId;
            obj.Action = strObj.Action;
            obj.NumOrder = strObj.NumOrder;
            obj.NumSegment = strObj.NumSegment;
            obj.StartYaw = strObj.StartYaw;
            obj.FinalYaw = strObj.FinalYaw;
            obj.MagCoeff = strObj.MagCoeff;
            obj.DebugInfo = strObj.DebugInfo;
            obj.CoefX = strObj.CoefX;
            obj.CoefY = strObj.CoefY;
            obj.CoefZ = strObj.CoefZ;
            obj.Time = strObj.Time;
            obj.Order = strObj.Order;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.TrajectoryId = obj.TrajectoryId;
            strObj.Action = obj.Action;
            strObj.NumOrder = obj.NumOrder;
            strObj.NumSegment = obj.NumSegment;
            strObj.StartYaw = obj.StartYaw;
            strObj.FinalYaw = obj.FinalYaw;
            strObj.MagCoeff = obj.MagCoeff;
            strObj.DebugInfo = obj.DebugInfo;
            strObj.CoefX = obj.CoefX;
            strObj.CoefY = obj.CoefY;
            strObj.CoefZ = obj.CoefZ;
            strObj.Time = obj.Time;
            strObj.Order = obj.Order;
            strObj.Header = saveobj(obj.Header);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.quadrotor_msgs.PolynomialTrajectory.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.quadrotor_msgs.PolynomialTrajectory;
            obj.reload(strObj);
        end
    end
end
