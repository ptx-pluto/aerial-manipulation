classdef Gains < ros.Message
    %Gains MATLAB implementation of quadrotor_msgs/Gains
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'quadrotor_msgs/Gains' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'b82763b9f24e5595e2a816aa779c9461' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        Kp
        Kd
        KpYaw
        KdYaw
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Kd', 'KdYaw', 'Kp', 'KpYaw'} % List of non-constant message properties
        ROSPropertyList = {'Kd', 'Kd_yaw', 'Kp', 'Kp_yaw'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = Gains(msg)
            %Gains Construct the message object Gains
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function kp = get.Kp(obj)
            %get.Kp Get the value for property Kp
            kp = double(obj.JavaMessage.getKp);
        end
        
        function set.Kp(obj, kp)
            %set.Kp Set the value for property Kp
            validateattributes(kp, {'numeric'}, {'nonempty', 'scalar'}, 'Gains', 'Kp');
            
            obj.JavaMessage.setKp(kp);
        end
        
        function kd = get.Kd(obj)
            %get.Kd Get the value for property Kd
            kd = double(obj.JavaMessage.getKd);
        end
        
        function set.Kd(obj, kd)
            %set.Kd Set the value for property Kd
            validateattributes(kd, {'numeric'}, {'nonempty', 'scalar'}, 'Gains', 'Kd');
            
            obj.JavaMessage.setKd(kd);
        end
        
        function kpyaw = get.KpYaw(obj)
            %get.KpYaw Get the value for property KpYaw
            kpyaw = double(obj.JavaMessage.getKpYaw);
        end
        
        function set.KpYaw(obj, kpyaw)
            %set.KpYaw Set the value for property KpYaw
            validateattributes(kpyaw, {'numeric'}, {'nonempty', 'scalar'}, 'Gains', 'KpYaw');
            
            obj.JavaMessage.setKpYaw(kpyaw);
        end
        
        function kdyaw = get.KdYaw(obj)
            %get.KdYaw Get the value for property KdYaw
            kdyaw = double(obj.JavaMessage.getKdYaw);
        end
        
        function set.KdYaw(obj, kdyaw)
            %set.KdYaw Set the value for property KdYaw
            validateattributes(kdyaw, {'numeric'}, {'nonempty', 'scalar'}, 'Gains', 'KdYaw');
            
            obj.JavaMessage.setKdYaw(kdyaw);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Kp = obj.Kp;
            cpObj.Kd = obj.Kd;
            cpObj.KpYaw = obj.KpYaw;
            cpObj.KdYaw = obj.KdYaw;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Kp = strObj.Kp;
            obj.Kd = strObj.Kd;
            obj.KpYaw = strObj.KpYaw;
            obj.KdYaw = strObj.KdYaw;
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Kp = obj.Kp;
            strObj.Kd = obj.Kd;
            strObj.KpYaw = obj.KpYaw;
            strObj.KdYaw = obj.KdYaw;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.quadrotor_msgs.Gains.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.quadrotor_msgs.Gains;
            obj.reload(strObj);
        end
    end
end
