classdef Replan < ros.Message
    %Replan MATLAB implementation of quadrotor_msgs/Replan
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'quadrotor_msgs/Replan' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '73a17ace4b8b54cf9b4974fbea003b7f' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        GeometryMsgsVector3Class = ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Vector3') % Dispatch to MATLAB class for message type geometry_msgs/Vector3
        NavMsgsPathClass = ros.msg.internal.MessageFactory.getClassForType('nav_msgs/Path') % Dispatch to MATLAB class for message type nav_msgs/Path
    end
    
    properties (Dependent)
        StartVelocity
        StartAcceleration
        Plan
        StopVelocity
        StopAcceleration
        ReplanTime
    end
    
    properties (Access = protected)
        Cache = struct('StartVelocity', [], 'StartAcceleration', [], 'Plan', [], 'StopVelocity', [], 'StopAcceleration', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Plan', 'ReplanTime', 'StartAcceleration', 'StartVelocity', 'StopAcceleration', 'StopVelocity'} % List of non-constant message properties
        ROSPropertyList = {'plan', 'replan_time', 'start_acceleration', 'start_velocity', 'stop_acceleration', 'stop_velocity'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = Replan(msg)
            %Replan Construct the message object Replan
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function startvelocity = get.StartVelocity(obj)
            %get.StartVelocity Get the value for property StartVelocity
            if isempty(obj.Cache.StartVelocity)
                obj.Cache.StartVelocity = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getStartVelocity);
            end
            startvelocity = obj.Cache.StartVelocity;
        end
        
        function set.StartVelocity(obj, startvelocity)
            %set.StartVelocity Set the value for property StartVelocity
            validateattributes(startvelocity, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'Replan', 'StartVelocity');
            
            obj.JavaMessage.setStartVelocity(startvelocity.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.StartVelocity)
                obj.Cache.StartVelocity.setJavaObject(startvelocity.getJavaObject);
            end
        end
        
        function startacceleration = get.StartAcceleration(obj)
            %get.StartAcceleration Get the value for property StartAcceleration
            if isempty(obj.Cache.StartAcceleration)
                obj.Cache.StartAcceleration = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getStartAcceleration);
            end
            startacceleration = obj.Cache.StartAcceleration;
        end
        
        function set.StartAcceleration(obj, startacceleration)
            %set.StartAcceleration Set the value for property StartAcceleration
            validateattributes(startacceleration, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'Replan', 'StartAcceleration');
            
            obj.JavaMessage.setStartAcceleration(startacceleration.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.StartAcceleration)
                obj.Cache.StartAcceleration.setJavaObject(startacceleration.getJavaObject);
            end
        end
        
        function plan = get.Plan(obj)
            %get.Plan Get the value for property Plan
            if isempty(obj.Cache.Plan)
                obj.Cache.Plan = feval(obj.NavMsgsPathClass, obj.JavaMessage.getPlan);
            end
            plan = obj.Cache.Plan;
        end
        
        function set.Plan(obj, plan)
            %set.Plan Set the value for property Plan
            validateattributes(plan, {obj.NavMsgsPathClass}, {'nonempty', 'scalar'}, 'Replan', 'Plan');
            
            obj.JavaMessage.setPlan(plan.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Plan)
                obj.Cache.Plan.setJavaObject(plan.getJavaObject);
            end
        end
        
        function stopvelocity = get.StopVelocity(obj)
            %get.StopVelocity Get the value for property StopVelocity
            if isempty(obj.Cache.StopVelocity)
                obj.Cache.StopVelocity = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getStopVelocity);
            end
            stopvelocity = obj.Cache.StopVelocity;
        end
        
        function set.StopVelocity(obj, stopvelocity)
            %set.StopVelocity Set the value for property StopVelocity
            validateattributes(stopvelocity, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'Replan', 'StopVelocity');
            
            obj.JavaMessage.setStopVelocity(stopvelocity.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.StopVelocity)
                obj.Cache.StopVelocity.setJavaObject(stopvelocity.getJavaObject);
            end
        end
        
        function stopacceleration = get.StopAcceleration(obj)
            %get.StopAcceleration Get the value for property StopAcceleration
            if isempty(obj.Cache.StopAcceleration)
                obj.Cache.StopAcceleration = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getStopAcceleration);
            end
            stopacceleration = obj.Cache.StopAcceleration;
        end
        
        function set.StopAcceleration(obj, stopacceleration)
            %set.StopAcceleration Set the value for property StopAcceleration
            validateattributes(stopacceleration, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'Replan', 'StopAcceleration');
            
            obj.JavaMessage.setStopAcceleration(stopacceleration.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.StopAcceleration)
                obj.Cache.StopAcceleration.setJavaObject(stopacceleration.getJavaObject);
            end
        end
        
        function replantime = get.ReplanTime(obj)
            %get.ReplanTime Get the value for property ReplanTime
            replantime = double(obj.JavaMessage.getReplanTime);
        end
        
        function set.ReplanTime(obj, replantime)
            %set.ReplanTime Set the value for property ReplanTime
            validateattributes(replantime, {'numeric'}, {'nonempty', 'scalar'}, 'Replan', 'ReplanTime');
            
            obj.JavaMessage.setReplanTime(replantime);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.StartVelocity = [];
            obj.Cache.StartAcceleration = [];
            obj.Cache.Plan = [];
            obj.Cache.StopVelocity = [];
            obj.Cache.StopAcceleration = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.ReplanTime = obj.ReplanTime;
            
            % Recursively copy compound properties
            cpObj.StartVelocity = copy(obj.StartVelocity);
            cpObj.StartAcceleration = copy(obj.StartAcceleration);
            cpObj.Plan = copy(obj.Plan);
            cpObj.StopVelocity = copy(obj.StopVelocity);
            cpObj.StopAcceleration = copy(obj.StopAcceleration);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.ReplanTime = strObj.ReplanTime;
            obj.StartVelocity = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.StartVelocity);
            obj.StartAcceleration = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.StartAcceleration);
            obj.Plan = feval([obj.NavMsgsPathClass '.loadobj'], strObj.Plan);
            obj.StopVelocity = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.StopVelocity);
            obj.StopAcceleration = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.StopAcceleration);
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.ReplanTime = obj.ReplanTime;
            strObj.StartVelocity = saveobj(obj.StartVelocity);
            strObj.StartAcceleration = saveobj(obj.StartAcceleration);
            strObj.Plan = saveobj(obj.Plan);
            strObj.StopVelocity = saveobj(obj.StopVelocity);
            strObj.StopAcceleration = saveobj(obj.StopAcceleration);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.quadrotor_msgs.Replan.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.quadrotor_msgs.Replan;
            obj.reload(strObj);
        end
    end
end
