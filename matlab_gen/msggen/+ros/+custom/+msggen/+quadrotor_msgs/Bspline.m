classdef Bspline < ros.Message
    %Bspline MATLAB implementation of quadrotor_msgs/Bspline
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'quadrotor_msgs/Bspline' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'b8380218fb47e65620f86497dd7aa15f' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant)
        ACTIONADD = uint32(1)
        ACTIONABORT = uint32(2)
        ACTIONWARNSTART = uint32(3)
        ACTIONWARNFINAL = uint32(4)
        ACTIONWARNIMPOSSIBLE = uint32(5)
    end
    
    properties (Constant, Access = protected)
        GeometryMsgsPointClass = ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Point') % Dispatch to MATLAB class for message type geometry_msgs/Point
        TimeClass = ros.msg.internal.MessageFactory.getClassForType('time') % Dispatch to MATLAB class for message type time
    end
    
    properties (Dependent)
        Action
        Order
        TrajId
        StartTime
        TimeExtra
        ReplanToGlobalTime
        Knots
        Pts
    end
    
    properties (Access = protected)
        Cache = struct('Pts', [], 'StartTime', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Action', 'Knots', 'Order', 'Pts', 'ReplanToGlobalTime', 'StartTime', 'TimeExtra', 'TrajId'} % List of non-constant message properties
        ROSPropertyList = {'action', 'knots', 'order', 'pts', 'replan_to_global_time', 'start_time', 'time_extra', 'traj_id'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = Bspline(msg)
            %Bspline Construct the message object Bspline
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function action = get.Action(obj)
            %get.Action Get the value for property Action
            action = typecast(int32(obj.JavaMessage.getAction), 'uint32');
        end
        
        function set.Action(obj, action)
            %set.Action Set the value for property Action
            validateattributes(action, {'numeric'}, {'nonempty', 'scalar'}, 'Bspline', 'Action');
            
            obj.JavaMessage.setAction(action);
        end
        
        function order = get.Order(obj)
            %get.Order Get the value for property Order
            order = int32(obj.JavaMessage.getOrder);
        end
        
        function set.Order(obj, order)
            %set.Order Set the value for property Order
            validateattributes(order, {'numeric'}, {'nonempty', 'scalar'}, 'Bspline', 'Order');
            
            obj.JavaMessage.setOrder(order);
        end
        
        function trajid = get.TrajId(obj)
            %get.TrajId Get the value for property TrajId
            trajid = int64(obj.JavaMessage.getTrajId);
        end
        
        function set.TrajId(obj, trajid)
            %set.TrajId Set the value for property TrajId
            validateattributes(trajid, {'numeric'}, {'nonempty', 'scalar'}, 'Bspline', 'TrajId');
            
            obj.JavaMessage.setTrajId(trajid);
        end
        
        function starttime = get.StartTime(obj)
            %get.StartTime Get the value for property StartTime
            if isempty(obj.Cache.StartTime)
                obj.Cache.StartTime = feval(obj.TimeClass, obj.JavaMessage.getStartTime);
            end
            starttime = obj.Cache.StartTime;
        end
        
        function set.StartTime(obj, starttime)
            %set.StartTime Set the value for property StartTime
            validateattributes(starttime, {obj.TimeClass}, {'nonempty', 'scalar'}, 'Bspline', 'StartTime');
            
            obj.JavaMessage.setStartTime(starttime.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.StartTime)
                obj.Cache.StartTime.setJavaObject(starttime.getJavaObject);
            end
        end
        
        function timeextra = get.TimeExtra(obj)
            %get.TimeExtra Get the value for property TimeExtra
            timeextra = double(obj.JavaMessage.getTimeExtra);
        end
        
        function set.TimeExtra(obj, timeextra)
            %set.TimeExtra Set the value for property TimeExtra
            validateattributes(timeextra, {'numeric'}, {'nonempty', 'scalar'}, 'Bspline', 'TimeExtra');
            
            obj.JavaMessage.setTimeExtra(timeextra);
        end
        
        function replantoglobaltime = get.ReplanToGlobalTime(obj)
            %get.ReplanToGlobalTime Get the value for property ReplanToGlobalTime
            replantoglobaltime = double(obj.JavaMessage.getReplanToGlobalTime);
        end
        
        function set.ReplanToGlobalTime(obj, replantoglobaltime)
            %set.ReplanToGlobalTime Set the value for property ReplanToGlobalTime
            validateattributes(replantoglobaltime, {'numeric'}, {'nonempty', 'scalar'}, 'Bspline', 'ReplanToGlobalTime');
            
            obj.JavaMessage.setReplanToGlobalTime(replantoglobaltime);
        end
        
        function knots = get.Knots(obj)
            %get.Knots Get the value for property Knots
            javaArray = obj.JavaMessage.getKnots;
            array = obj.readJavaArray(javaArray, 'double');
            knots = double(array);
        end
        
        function set.Knots(obj, knots)
            %set.Knots Set the value for property Knots
            if ~isvector(knots) && isempty(knots)
                % Allow empty [] input
                knots = double.empty(0,1);
            end
            
            validateattributes(knots, {'numeric'}, {'vector'}, 'Bspline', 'Knots');
            
            javaArray = obj.JavaMessage.getKnots;
            array = obj.writeJavaArray(knots, javaArray, 'double');
            obj.JavaMessage.setKnots(array);
        end
        
        function pts = get.Pts(obj)
            %get.Pts Get the value for property Pts
            if isempty(obj.Cache.Pts)
                javaArray = obj.JavaMessage.getPts;
                array = obj.readJavaArray(javaArray, obj.GeometryMsgsPointClass);
                obj.Cache.Pts = feval(obj.GeometryMsgsPointClass, array);
            end
            pts = obj.Cache.Pts;
        end
        
        function set.Pts(obj, pts)
            %set.Pts Set the value for property Pts
            if ~isvector(pts) && isempty(pts)
                % Allow empty [] input
                pts = feval([obj.GeometryMsgsPointClass '.empty'], 0, 1);
            end
            
            validateattributes(pts, {obj.GeometryMsgsPointClass}, {'vector'}, 'Bspline', 'Pts');
            
            javaArray = obj.JavaMessage.getPts;
            array = obj.writeJavaArray(pts, javaArray, obj.GeometryMsgsPointClass);
            obj.JavaMessage.setPts(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Pts)
                obj.Cache.Pts = [];
                obj.Cache.Pts = obj.Pts;
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Pts = [];
            obj.Cache.StartTime = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Action = obj.Action;
            cpObj.Order = obj.Order;
            cpObj.TrajId = obj.TrajId;
            cpObj.TimeExtra = obj.TimeExtra;
            cpObj.ReplanToGlobalTime = obj.ReplanToGlobalTime;
            cpObj.Knots = obj.Knots;
            
            % Recursively copy compound properties
            cpObj.StartTime = copy(obj.StartTime);
            cpObj.Pts = copy(obj.Pts);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Action = strObj.Action;
            obj.Order = strObj.Order;
            obj.TrajId = strObj.TrajId;
            obj.TimeExtra = strObj.TimeExtra;
            obj.ReplanToGlobalTime = strObj.ReplanToGlobalTime;
            obj.Knots = strObj.Knots;
            obj.StartTime = feval([obj.TimeClass '.loadobj'], strObj.StartTime);
            PtsCell = arrayfun(@(x) feval([obj.GeometryMsgsPointClass '.loadobj'], x), strObj.Pts, 'UniformOutput', false);
            obj.Pts = vertcat(PtsCell{:});
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Action = obj.Action;
            strObj.Order = obj.Order;
            strObj.TrajId = obj.TrajId;
            strObj.TimeExtra = obj.TimeExtra;
            strObj.ReplanToGlobalTime = obj.ReplanToGlobalTime;
            strObj.Knots = obj.Knots;
            strObj.StartTime = saveobj(obj.StartTime);
            strObj.Pts = arrayfun(@(x) saveobj(x), obj.Pts);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.quadrotor_msgs.Bspline.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.quadrotor_msgs.Bspline;
            obj.reload(strObj);
        end
    end
end
