classdef SwarmCommand < ros.Message
    %SwarmCommand MATLAB implementation of quadrotor_msgs/SwarmCommand
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'quadrotor_msgs/SwarmCommand' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'fb2553d3cc9aea3fc90865317210e00c' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        NavMsgsPathClass = ros.msg.internal.MessageFactory.getClassForType('nav_msgs/Path') % Dispatch to MATLAB class for message type nav_msgs/Path
        StdMsgsHeaderClass = ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        Plan
        Selection
        Formation
    end
    
    properties (Access = protected)
        Cache = struct('Header', [], 'Plan', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Formation', 'Header', 'Plan', 'Selection'} % List of non-constant message properties
        ROSPropertyList = {'formation', 'header', 'plan', 'selection'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = SwarmCommand(msg)
            %SwarmCommand Construct the message object SwarmCommand
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'SwarmCommand', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function plan = get.Plan(obj)
            %get.Plan Get the value for property Plan
            if isempty(obj.Cache.Plan)
                obj.Cache.Plan = feval(obj.NavMsgsPathClass, obj.JavaMessage.getPlan);
            end
            plan = obj.Cache.Plan;
        end
        
        function set.Plan(obj, plan)
            %set.Plan Set the value for property Plan
            validateattributes(plan, {obj.NavMsgsPathClass}, {'nonempty', 'scalar'}, 'SwarmCommand', 'Plan');
            
            obj.JavaMessage.setPlan(plan.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Plan)
                obj.Cache.Plan.setJavaObject(plan.getJavaObject);
            end
        end
        
        function selection = get.Selection(obj)
            %get.Selection Get the value for property Selection
            javaArray = obj.JavaMessage.getSelection;
            array = obj.readJavaArray(javaArray, 'int32');
            selection = int32(array);
        end
        
        function set.Selection(obj, selection)
            %set.Selection Set the value for property Selection
            if ~isvector(selection) && isempty(selection)
                % Allow empty [] input
                selection = int32.empty(0,1);
            end
            
            validateattributes(selection, {'numeric'}, {'vector'}, 'SwarmCommand', 'Selection');
            
            javaArray = obj.JavaMessage.getSelection;
            array = obj.writeJavaArray(selection, javaArray, 'int32');
            obj.JavaMessage.setSelection(array);
        end
        
        function formation = get.Formation(obj)
            %get.Formation Get the value for property Formation
            javaArray = obj.JavaMessage.getFormation;
            array = obj.readJavaArray(javaArray, 'single');
            formation = single(array);
        end
        
        function set.Formation(obj, formation)
            %set.Formation Set the value for property Formation
            if ~isvector(formation) && isempty(formation)
                % Allow empty [] input
                formation = single.empty(0,1);
            end
            
            validateattributes(formation, {'numeric'}, {'vector'}, 'SwarmCommand', 'Formation');
            
            javaArray = obj.JavaMessage.getFormation;
            array = obj.writeJavaArray(formation, javaArray, 'single');
            obj.JavaMessage.setFormation(array);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
            obj.Cache.Plan = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Selection = obj.Selection;
            cpObj.Formation = obj.Formation;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
            cpObj.Plan = copy(obj.Plan);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Selection = strObj.Selection;
            obj.Formation = strObj.Formation;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
            obj.Plan = feval([obj.NavMsgsPathClass '.loadobj'], strObj.Plan);
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Selection = obj.Selection;
            strObj.Formation = obj.Formation;
            strObj.Header = saveobj(obj.Header);
            strObj.Plan = saveobj(obj.Plan);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.quadrotor_msgs.SwarmCommand.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.quadrotor_msgs.SwarmCommand;
            obj.reload(strObj);
        end
    end
end
